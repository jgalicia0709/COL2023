# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'COL_GUI_v7.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# John using v7 .ui file
from PyQt5 import QtCore, QtGui, QtWidgets
from selenium import webdriver
from selenium.common.exceptions import StaleElementReferenceException
from selenium.common.exceptions import TimeoutException
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
# import selenium.webdriver.support as EC
from selenium.webdriver.support import expected_conditions as EC
import time
import datetime
# from twilio.rest import Client
import os, logging, chromedriver_autoinstaller
from selenium.webdriver.chrome.options import Options

import matplotlib.pyplot as plt

# import numpy as np
# import pandas as pd

chromedriver_autoinstaller.install(cwd=True)
option = Options()
option.add_argument('--disable-infobars')
option.add_argument('--disable-extensions')
option.add_experimental_option('prefs', {'profile.default_content_setting_values.notifications': 1})
browser = webdriver.Chrome()
# browser.implicitly_wait(60) # newly added not sure if will work
wait = WebDriverWait(browser, 15)
account_sid = 'ACe8fb424b9e1701dec3d270eabb39d9d3'
auth_token = 'e7c5cf99e8ceadaca9f5a5dc2ab383fb'
# client = Client(account_sid, auth_token)

# global variable from old version set to strings for .sendkeys()
stock = ''
stock_volume = ''
buy_price = ''
sell_price = ''
password = ''

xpath_price_with_integer = '//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[1]/table/tbody/tr[2]/td/table[2]/tbody/tr[%d]/td[3]'
xpath_price = '//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[1]/table/tbody/tr[2]/td/table[2]/tbody/tr[3]/td[3]'
# ConfigFile_full_path = 'C:\\Users\\john8\\OneDrive\\Desktop\\Python Projects\\STOCKS\\COL\\config_john.txt'
colCredentials_full_path = os.getcwd() + "\\colCredentials.txt"

###################################### START of algo and graph #############################
# ****************************
# ***** GUI VARIABLES *****
# ****************************
ConfigFile_full_pathArray = [os.getcwd() + "\\config1.txt", os.getcwd() + "\\config2.txt",
                             os.getcwd() + "\\config3.txt", os.getcwd() + "\\config4.txt",
                             os.getcwd() + "\\config5.txt", os.getcwd() + "\\config6.txt"]
configGUIArray = []
stock1Array = []
stock2Array = []
stock3Array = []
stock4Array = []
stock5Array = []
stock6Array = []

# ****************************
# ***** WEBSITE VARIABLES *****
# ****************************
websitePesobility_MostActive = "https://www.pesobility.com/reports/most-active"  # pesobility website
websitePSE_MostActive = "https://www.pse.com.ph/most-active/"  # pse website
websitePSEhistoricalData_StockName = "https://www.pse.com.ph/company-information-"  # pse link + Stock symbol (i.e. https://www.pse.com.ph/company-information-DITO)
websiteCOL = "https://www.colfinancial.com/ape/Final2/home/HOME_NL_MAIN.asp?p=0"

glob_mostActiveSymbol = []  # most active stocks array container from pesobility / pse
glob_mostActiveDoubleVolume3DArray = []  # [ [stock1, [average1], [volume1]], [stock2, [average2], [volume2]], [stockX, [averageX], [volumeX]]]
glob_stockToAnalyze3DArray = []  # [ [stock, [average1], [volume1] ] for manual analysis of any stock code
glob_counter = 0  # global count of stock code in port to be used for sell_setup
glob_portfolioStockCodeArray = []  # container for available stock code in portfolio
glob_portfolioTotalSharesArray = []  # int container for total shares in portfolio
glob_viewModifyOrderStockCodeArray = []
glob_viewModifyOrderTargetPriceArray = []
glob_viewModifyOrderBuyOrSellArray = []

# this 4 will be used in mode checking
glob_portfolioStockPresentArray = []  # int
glob_portfolioTotalSharesGreaterVolumeArray = []  # int
glob_viewModifyOrderStockCodeB1orS1PresentArray = []  # int
glob_viewModifyOrderStockCodeB2orS2PresentArray = []  # int

# this contains the calculated mode of the 4 arrays above
glob_calcToDeclVal = []

# ****************************
# ***** XPATH PESOBILITY *****
# ****************************
pesobility_xpathHeader = '//*[@id="MAIN_BODY"]/div[1]/div/h1'  # pesobility Most Active Header
pesobility_xpathMostActive = '//*[@id="MAIN_BODY"]/div[1]/div/table/tbody/tr[%d]/td[2]/a'  ### pesobility xpath most active first stock code element

# ****************************
# ******** XPATH PSE *********
# ****************************
pse_xpathMostActive = '/html/body/div/div/div/div[2]/div/div/table/tbody/tr[%d]/td[2]/a'  # PSE xpath most active first stock code element
pse_xpathIframeMostActive = '//*[@id="mostActive_"]'  # iframe_MostActive using "PSE"
pse_xpathHeaderSymbolName = '/html/body/div/div/div/div[2]/div/div/table/thead/tr/th[2]/div'  # pse header symbol
pse_xpathIframeHistoricalData = '//*[@id="company_infos"]'  # ifram historical data
pse_xpathPageNumberHistoricalData = '//*[@id="page-%d"]'  # page number on historical data (10 data per page)
pse_xpathFirstVolDataAvailable = '//*[@id="data"]/tbody/tr[%d]/td[7]'
pse_xpathAveragePriceValue = '//*[@id="data"]/tbody/tr[%d]/td[6]'
pse_xpathAverageVolValue = '//*[@id="data"]/tbody/tr[%d]/td[7]'

# ****************************
# ******** XPATH COL *********
# ****************************
col_xpathUser1 = '//*[@id="login"]/div/input[1]'
col_xpathUser2 = '//*[@id="login"]/div/input[2]'
col_xpathPass = '//*[@id="login"]/div/input[3]'
col_xpathLogIn = '//*[@id="login"]/div/input[10]'

col_xpathTradeHeadern = '//*[@id="headern"]'  # Trade-Porfolio-ViewModify Order headern

col_xpathTradeButton = '//*[@id="CT"]/a/font/b'  # Trade button
col_xpathPortfolioButton = '//*[@id="L1_3_4"]/a/font/b'  # Portfolio button
col_xpathStockCodeHeadern = '//*[@id="main"]'  # stock code in portfolio headern
col_xpathBuySellTextInPortfolio_withIntVar = '/html/body/div[2]/table/tbody/tr/td/table[2]/tbody/tr[3]/td/table/tbody/tr[%d]/td[1]/font'  # "BUY" text to count how many stocks in portfoilio tr[3]
col_xpathPortfolioStockCode_withIntVar = '/html/body/div[2]/table/tbody/tr/td/table[2]/tbody/tr[3]/td/table/tbody/tr[%d]/td[2]/font'  # stock code with INT var tr[3]
col_xpathPortfolioTotalShares_withIntVar = '/html/body/div[2]/table/tbody/tr/td/table[2]/tbody/tr[3]/td/table/tbody/tr[%d]/td[7]/font'  # total shares with INT var tr[3]

col_xpathViewModifyButton = '//*[@id="L1_3_2"]/a/font/b'  # View/Modify order button
col_xpathViewModifyStockCodeText = '/html/body/div[1]/table[2]/tbody/tr/td/form/table/tbody/tr/td[1]/font'  # wait "Stock Code" text as go signal to count
col_xpathViewModifyStockCode_withIntVar = '/html/body/div[1]/table[2]/tbody/tr/td/table/tbody/tr[%d]/td[5]/font'  # 1st Stock code tr[2]
col_xpathViewModifyPrice_withIntVar = '/html/body/div[1]/table[2]/tbody/tr/td/table/tbody/tr[%d]/td[7]/p/font'  # 1st price tr[2]
col_xpathViewModifyBNorSN_withIntVar = '/html/body/div[1]/table[2]/tbody/tr/td/table/tbody/tr[%d]/td[6]/font'  # 1st BN or SN tr[2]


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(653, 771)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.tab)
        self.verticalLayout.setObjectName("verticalLayout")
        self.frame_2 = QtWidgets.QFrame(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_2.sizePolicy().hasHeightForWidth())
        self.frame_2.setSizePolicy(sizePolicy)
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setSpacing(0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.frame_3 = QtWidgets.QFrame(self.frame_2)
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.frame_3)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setSpacing(0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.frame_5 = QtWidgets.QFrame(self.frame_3)
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.hboxlayout = QtWidgets.QHBoxLayout(self.frame_5)
        self.hboxlayout.setContentsMargins(0, 0, 0, 0)
        self.hboxlayout.setSpacing(6)
        self.hboxlayout.setObjectName("hboxlayout")
        self.label = QtWidgets.QLabel(self.frame_5)
        self.label.setMaximumSize(QtCore.QSize(100, 16777215))
        self.label.setObjectName("label")
        self.hboxlayout.addWidget(self.label)
        self.label_2 = QtWidgets.QLabel(self.frame_5)
        self.label_2.setMaximumSize(QtCore.QSize(100, 16777215))
        self.label_2.setObjectName("label_2")
        self.hboxlayout.addWidget(self.label_2)
        self.label_3 = QtWidgets.QLabel(self.frame_5)
        self.label_3.setObjectName("label_3")
        self.hboxlayout.addWidget(self.label_3)
        self.verticalLayout_2.addWidget(self.frame_5, 0, QtCore.Qt.AlignTop)
        self.frame_6 = QtWidgets.QFrame(self.frame_3)
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_6)
        self.horizontalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_3.setSpacing(6)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.USER1_lineEdit = QtWidgets.QLineEdit(self.frame_6)
        self.USER1_lineEdit.setMaximumSize(QtCore.QSize(100, 16777215))
        self.USER1_lineEdit.setText("")
        self.USER1_lineEdit.setObjectName("USER1_lineEdit")
        self.horizontalLayout_3.addWidget(self.USER1_lineEdit)
        self.USER2_lineEdit = QtWidgets.QLineEdit(self.frame_6)
        self.USER2_lineEdit.setMaximumSize(QtCore.QSize(100, 16777215))
        self.USER2_lineEdit.setText("")
        self.USER2_lineEdit.setObjectName("USER2_lineEdit")
        self.horizontalLayout_3.addWidget(self.USER2_lineEdit)
        self.PASSWORD_lineEdit = QtWidgets.QLineEdit(self.frame_6)
        self.PASSWORD_lineEdit.setText("")
        self.PASSWORD_lineEdit.setEchoMode(QtWidgets.QLineEdit.Password)
        self.PASSWORD_lineEdit.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.PASSWORD_lineEdit.setObjectName("PASSWORD_lineEdit")
        self.horizontalLayout_3.addWidget(self.PASSWORD_lineEdit)
        self.verticalLayout_2.addWidget(self.frame_6, 0, QtCore.Qt.AlignBottom)
        self.horizontalLayout.addWidget(self.frame_3, 0, QtCore.Qt.AlignLeft)
        self.frame_4 = QtWidgets.QFrame(self.frame_2)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_4.setSpacing(0)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.START_pushButton = QtWidgets.QPushButton(self.frame_4)
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.START_pushButton.setFont(font)
        self.START_pushButton.setObjectName("START_pushButton")
        self.horizontalLayout_4.addWidget(self.START_pushButton)
        self.horizontalLayout.addWidget(self.frame_4, 0, QtCore.Qt.AlignRight)
        self.verticalLayout.addWidget(self.frame_2, 0, QtCore.Qt.AlignTop)
        self.frame = QtWidgets.QFrame(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setSpacing(0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.frame_8 = QtWidgets.QFrame(self.frame)
        self.frame_8.setStyleSheet("background-color: rgb(247, 247, 247);")
        self.frame_8.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_8.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_8.setObjectName("frame_8")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.frame_8)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setSpacing(0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.frame_14 = QtWidgets.QFrame(self.frame_8)
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout(self.frame_14)
        self.horizontalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_6.setSpacing(6)
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.STOCK1_checkBox = QtWidgets.QCheckBox(self.frame_14)
        self.STOCK1_checkBox.setText("")
        self.STOCK1_checkBox.setObjectName("STOCK1_checkBox")
        self.horizontalLayout_6.addWidget(self.STOCK1_checkBox)
        self.label_16 = QtWidgets.QLabel(self.frame_14)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_16.setFont(font)
        self.label_16.setAlignment(QtCore.Qt.AlignCenter)
        self.label_16.setObjectName("label_16")
        self.horizontalLayout_6.addWidget(self.label_16)
        self.verticalLayout_4.addWidget(self.frame_14, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.STOCK1_frame = QtWidgets.QFrame(self.frame_8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.STOCK1_frame.sizePolicy().hasHeightForWidth())
        self.STOCK1_frame.setSizePolicy(sizePolicy)
        self.STOCK1_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK1_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.STOCK1_frame.setObjectName("STOCK1_frame")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.STOCK1_frame)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.frame_26 = QtWidgets.QFrame(self.STOCK1_frame)
        self.frame_26.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_26.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_26.setObjectName("frame_26")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout(self.frame_26)
        self.verticalLayout_10.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.label_6 = QtWidgets.QLabel(self.frame_26)
        self.label_6.setMinimumSize(QtCore.QSize(0, 20))
        self.label_6.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_6.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_10.addWidget(self.label_6)
        self.label_5 = QtWidgets.QLabel(self.frame_26)
        self.label_5.setMinimumSize(QtCore.QSize(0, 20))
        self.label_5.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_5.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_5.setObjectName("label_5")
        self.verticalLayout_10.addWidget(self.label_5)
        self.label_4 = QtWidgets.QLabel(self.frame_26)
        self.label_4.setMinimumSize(QtCore.QSize(0, 20))
        self.label_4.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_4.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_4.setObjectName("label_4")
        self.verticalLayout_10.addWidget(self.label_4)
        self.label_8 = QtWidgets.QLabel(self.frame_26)
        self.label_8.setMinimumSize(QtCore.QSize(0, 20))
        self.label_8.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_8.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_8.setObjectName("label_8")
        self.verticalLayout_10.addWidget(self.label_8)
        self.label_7 = QtWidgets.QLabel(self.frame_26)
        self.label_7.setMinimumSize(QtCore.QSize(0, 20))
        self.label_7.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_7.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_7.setObjectName("label_7")
        self.verticalLayout_10.addWidget(self.label_7)
        self.label_9 = QtWidgets.QLabel(self.frame_26)
        self.label_9.setMinimumSize(QtCore.QSize(0, 20))
        self.label_9.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_9.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_9.setObjectName("label_9")
        self.verticalLayout_10.addWidget(self.label_9)
        self.label_13 = QtWidgets.QLabel(self.frame_26)
        self.label_13.setMinimumSize(QtCore.QSize(0, 20))
        self.label_13.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_13.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_13.setObjectName("label_13")
        self.verticalLayout_10.addWidget(self.label_13)
        self.label_15 = QtWidgets.QLabel(self.frame_26)
        self.label_15.setMinimumSize(QtCore.QSize(0, 20))
        self.label_15.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_15.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_15.setObjectName("label_15")
        self.verticalLayout_10.addWidget(self.label_15)
        self.label_12 = QtWidgets.QLabel(self.frame_26)
        self.label_12.setMinimumSize(QtCore.QSize(0, 20))
        self.label_12.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_12.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_12.setObjectName("label_12")
        self.verticalLayout_10.addWidget(self.label_12)
        self.label_14 = QtWidgets.QLabel(self.frame_26)
        self.label_14.setMinimumSize(QtCore.QSize(0, 20))
        self.label_14.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_14.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_14.setObjectName("label_14")
        self.verticalLayout_10.addWidget(self.label_14)
        self.horizontalLayout_12.addWidget(self.frame_26)
        self.frame_27 = QtWidgets.QFrame(self.STOCK1_frame)
        self.frame_27.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_27.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_27.setObjectName("frame_27")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout(self.frame_27)
        self.verticalLayout_11.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.STOCK1_NAME_lineEdit = QtWidgets.QLineEdit(self.frame_27)
        self.STOCK1_NAME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_NAME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_NAME_lineEdit.setObjectName("STOCK1_NAME_lineEdit")
        self.verticalLayout_11.addWidget(self.STOCK1_NAME_lineEdit)
        self.STOCK1_VOLUME_lineEdit = QtWidgets.QLineEdit(self.frame_27)
        self.STOCK1_VOLUME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_VOLUME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_VOLUME_lineEdit.setObjectName("STOCK1_VOLUME_lineEdit")
        self.verticalLayout_11.addWidget(self.STOCK1_VOLUME_lineEdit)
        self.STOCK1_BUY1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_27)
        self.STOCK1_BUY1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_BUY1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_BUY1_PRICE_lineEdit.setObjectName("STOCK1_BUY1_PRICE_lineEdit")
        self.verticalLayout_11.addWidget(self.STOCK1_BUY1_PRICE_lineEdit)
        self.STOCK1_TotalBuy1_label = QtWidgets.QLabel(self.frame_27)
        self.STOCK1_TotalBuy1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_TotalBuy1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_TotalBuy1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK1_TotalBuy1_label.setText("")
        self.STOCK1_TotalBuy1_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK1_TotalBuy1_label.setObjectName("STOCK1_TotalBuy1_label")
        self.verticalLayout_11.addWidget(self.STOCK1_TotalBuy1_label)
        self.STOCK1_SELL1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_27)
        self.STOCK1_SELL1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_SELL1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_SELL1_PRICE_lineEdit.setObjectName("STOCK1_SELL1_PRICE_lineEdit")
        self.verticalLayout_11.addWidget(self.STOCK1_SELL1_PRICE_lineEdit)
        self.STOCK1_TotalSell1_label = QtWidgets.QLabel(self.frame_27)
        self.STOCK1_TotalSell1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_TotalSell1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_TotalSell1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK1_TotalSell1_label.setText("")
        self.STOCK1_TotalSell1_label.setObjectName("STOCK1_TotalSell1_label")
        self.verticalLayout_11.addWidget(self.STOCK1_TotalSell1_label)
        self.STOCK1_BUY2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_27)
        self.STOCK1_BUY2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_BUY2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_BUY2_PRICE_lineEdit.setObjectName("STOCK1_BUY2_PRICE_lineEdit")
        self.verticalLayout_11.addWidget(self.STOCK1_BUY2_PRICE_lineEdit)
        self.STOCK1_TotalBuy2_label = QtWidgets.QLabel(self.frame_27)
        self.STOCK1_TotalBuy2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_TotalBuy2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_TotalBuy2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK1_TotalBuy2_label.setText("")
        self.STOCK1_TotalBuy2_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK1_TotalBuy2_label.setObjectName("STOCK1_TotalBuy2_label")
        self.verticalLayout_11.addWidget(self.STOCK1_TotalBuy2_label)
        self.STOCK1_SELL2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_27)
        self.STOCK1_SELL2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_SELL2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_SELL2_PRICE_lineEdit.setObjectName("STOCK1_SELL2_PRICE_lineEdit")
        self.verticalLayout_11.addWidget(self.STOCK1_SELL2_PRICE_lineEdit)
        self.STOCK1_TotalSell2_label = QtWidgets.QLabel(self.frame_27)
        self.STOCK1_TotalSell2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK1_TotalSell2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK1_TotalSell2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK1_TotalSell2_label.setText("")
        self.STOCK1_TotalSell2_label.setObjectName("STOCK1_TotalSell2_label")
        self.verticalLayout_11.addWidget(self.STOCK1_TotalSell2_label)
        self.horizontalLayout_12.addWidget(self.frame_27)
        self.verticalLayout_4.addWidget(self.STOCK1_frame)
        self.horizontalLayout_2.addWidget(self.frame_8)
        self.frame_9 = QtWidgets.QFrame(self.frame)
        self.frame_9.setStyleSheet("background-color: rgb(223, 223, 223);")
        self.frame_9.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_9.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_9.setObjectName("frame_9")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.frame_9)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setSpacing(0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.frame_16 = QtWidgets.QFrame(self.frame_9)
        self.frame_16.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_16.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_16.setObjectName("frame_16")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_16)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setSpacing(6)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.STOCK2_checkBox = QtWidgets.QCheckBox(self.frame_16)
        self.STOCK2_checkBox.setText("")
        self.STOCK2_checkBox.setObjectName("STOCK2_checkBox")
        self.horizontalLayout_7.addWidget(self.STOCK2_checkBox)
        self.label_18 = QtWidgets.QLabel(self.frame_16)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_18.setFont(font)
        self.label_18.setAlignment(QtCore.Qt.AlignCenter)
        self.label_18.setObjectName("label_18")
        self.horizontalLayout_7.addWidget(self.label_18)
        self.verticalLayout_5.addWidget(self.frame_16, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.STOCK2_frame = QtWidgets.QFrame(self.frame_9)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.STOCK2_frame.sizePolicy().hasHeightForWidth())
        self.STOCK2_frame.setSizePolicy(sizePolicy)
        self.STOCK2_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK2_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.STOCK2_frame.setObjectName("STOCK2_frame")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout(self.STOCK2_frame)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.frame_28 = QtWidgets.QFrame(self.STOCK2_frame)
        self.frame_28.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_28.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_28.setObjectName("frame_28")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.frame_28)
        self.verticalLayout_12.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.label_17 = QtWidgets.QLabel(self.frame_28)
        self.label_17.setMinimumSize(QtCore.QSize(0, 20))
        self.label_17.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_17.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_17.setObjectName("label_17")
        self.verticalLayout_12.addWidget(self.label_17)
        self.label_24 = QtWidgets.QLabel(self.frame_28)
        self.label_24.setMinimumSize(QtCore.QSize(0, 20))
        self.label_24.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_24.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_24.setObjectName("label_24")
        self.verticalLayout_12.addWidget(self.label_24)
        self.label_26 = QtWidgets.QLabel(self.frame_28)
        self.label_26.setMinimumSize(QtCore.QSize(0, 20))
        self.label_26.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_26.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_26.setObjectName("label_26")
        self.verticalLayout_12.addWidget(self.label_26)
        self.label_27 = QtWidgets.QLabel(self.frame_28)
        self.label_27.setMinimumSize(QtCore.QSize(0, 20))
        self.label_27.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_27.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_27.setObjectName("label_27")
        self.verticalLayout_12.addWidget(self.label_27)
        self.label_22 = QtWidgets.QLabel(self.frame_28)
        self.label_22.setMinimumSize(QtCore.QSize(0, 20))
        self.label_22.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_22.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_22.setObjectName("label_22")
        self.verticalLayout_12.addWidget(self.label_22)
        self.label_23 = QtWidgets.QLabel(self.frame_28)
        self.label_23.setMinimumSize(QtCore.QSize(0, 20))
        self.label_23.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_23.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_23.setObjectName("label_23")
        self.verticalLayout_12.addWidget(self.label_23)
        self.label_21 = QtWidgets.QLabel(self.frame_28)
        self.label_21.setMinimumSize(QtCore.QSize(0, 20))
        self.label_21.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_21.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_21.setObjectName("label_21")
        self.verticalLayout_12.addWidget(self.label_21)
        self.label_20 = QtWidgets.QLabel(self.frame_28)
        self.label_20.setMinimumSize(QtCore.QSize(0, 20))
        self.label_20.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_20.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_20.setObjectName("label_20")
        self.verticalLayout_12.addWidget(self.label_20)
        self.label_19 = QtWidgets.QLabel(self.frame_28)
        self.label_19.setMinimumSize(QtCore.QSize(0, 20))
        self.label_19.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_19.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_19.setObjectName("label_19")
        self.verticalLayout_12.addWidget(self.label_19)
        self.label_25 = QtWidgets.QLabel(self.frame_28)
        self.label_25.setMinimumSize(QtCore.QSize(0, 20))
        self.label_25.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_25.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_25.setObjectName("label_25")
        self.verticalLayout_12.addWidget(self.label_25)
        self.horizontalLayout_13.addWidget(self.frame_28)
        self.frame_29 = QtWidgets.QFrame(self.STOCK2_frame)
        self.frame_29.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_29.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_29.setObjectName("frame_29")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout(self.frame_29)
        self.verticalLayout_13.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.STOCK2_NAME_lineEdit = QtWidgets.QLineEdit(self.frame_29)
        self.STOCK2_NAME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_NAME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_NAME_lineEdit.setObjectName("STOCK2_NAME_lineEdit")
        self.verticalLayout_13.addWidget(self.STOCK2_NAME_lineEdit)
        self.STOCK2_VOLUME_lineEdit = QtWidgets.QLineEdit(self.frame_29)
        self.STOCK2_VOLUME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_VOLUME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_VOLUME_lineEdit.setObjectName("STOCK2_VOLUME_lineEdit")
        self.verticalLayout_13.addWidget(self.STOCK2_VOLUME_lineEdit)
        self.STOCK2_BUY1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_29)
        self.STOCK2_BUY1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_BUY1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_BUY1_PRICE_lineEdit.setObjectName("STOCK2_BUY1_PRICE_lineEdit")
        self.verticalLayout_13.addWidget(self.STOCK2_BUY1_PRICE_lineEdit)
        self.STOCK2_TotalBuy1_label = QtWidgets.QLabel(self.frame_29)
        self.STOCK2_TotalBuy1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_TotalBuy1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_TotalBuy1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK2_TotalBuy1_label.setText("")
        self.STOCK2_TotalBuy1_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK2_TotalBuy1_label.setObjectName("STOCK2_TotalBuy1_label")
        self.verticalLayout_13.addWidget(self.STOCK2_TotalBuy1_label)
        self.STOCK2_SELL1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_29)
        self.STOCK2_SELL1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_SELL1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_SELL1_PRICE_lineEdit.setObjectName("STOCK2_SELL1_PRICE_lineEdit")
        self.verticalLayout_13.addWidget(self.STOCK2_SELL1_PRICE_lineEdit)
        self.STOCK2_TotalSell1_label = QtWidgets.QLabel(self.frame_29)
        self.STOCK2_TotalSell1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_TotalSell1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_TotalSell1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK2_TotalSell1_label.setText("")
        self.STOCK2_TotalSell1_label.setObjectName("STOCK2_TotalSell1_label")
        self.verticalLayout_13.addWidget(self.STOCK2_TotalSell1_label)
        self.STOCK2_BUY2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_29)
        self.STOCK2_BUY2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_BUY2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_BUY2_PRICE_lineEdit.setObjectName("STOCK2_BUY2_PRICE_lineEdit")
        self.verticalLayout_13.addWidget(self.STOCK2_BUY2_PRICE_lineEdit)
        self.STOCK2_TotalBuy2_label = QtWidgets.QLabel(self.frame_29)
        self.STOCK2_TotalBuy2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_TotalBuy2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_TotalBuy2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK2_TotalBuy2_label.setText("")
        self.STOCK2_TotalBuy2_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK2_TotalBuy2_label.setObjectName("STOCK2_TotalBuy2_label")
        self.verticalLayout_13.addWidget(self.STOCK2_TotalBuy2_label)
        self.STOCK2_SELL2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_29)
        self.STOCK2_SELL2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_SELL2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_SELL2_PRICE_lineEdit.setObjectName("STOCK2_SELL2_PRICE_lineEdit")
        self.verticalLayout_13.addWidget(self.STOCK2_SELL2_PRICE_lineEdit)
        self.STOCK2_TotalSell2_label = QtWidgets.QLabel(self.frame_29)
        self.STOCK2_TotalSell2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK2_TotalSell2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK2_TotalSell2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK2_TotalSell2_label.setText("")
        self.STOCK2_TotalSell2_label.setObjectName("STOCK2_TotalSell2_label")
        self.verticalLayout_13.addWidget(self.STOCK2_TotalSell2_label)
        self.horizontalLayout_13.addWidget(self.frame_29)
        self.verticalLayout_5.addWidget(self.STOCK2_frame)
        self.horizontalLayout_2.addWidget(self.frame_9)
        self.frame_10 = QtWidgets.QFrame(self.frame)
        self.frame_10.setStyleSheet("background-color: rgb(247, 247, 247);")
        self.frame_10.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_10.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_10.setObjectName("frame_10")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.frame_10)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setSpacing(0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.frame_18 = QtWidgets.QFrame(self.frame_10)
        self.frame_18.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_18.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_18.setObjectName("frame_18")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.frame_18)
        self.horizontalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_8.setSpacing(6)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.STOCK3_checkBox = QtWidgets.QCheckBox(self.frame_18)
        self.STOCK3_checkBox.setText("")
        self.STOCK3_checkBox.setObjectName("STOCK3_checkBox")
        self.horizontalLayout_8.addWidget(self.STOCK3_checkBox)
        self.label_29 = QtWidgets.QLabel(self.frame_18)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_29.setFont(font)
        self.label_29.setAlignment(QtCore.Qt.AlignCenter)
        self.label_29.setObjectName("label_29")
        self.horizontalLayout_8.addWidget(self.label_29)
        self.verticalLayout_6.addWidget(self.frame_18, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.STOCK3_frame = QtWidgets.QFrame(self.frame_10)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.STOCK3_frame.sizePolicy().hasHeightForWidth())
        self.STOCK3_frame.setSizePolicy(sizePolicy)
        self.STOCK3_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK3_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.STOCK3_frame.setObjectName("STOCK3_frame")
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout(self.STOCK3_frame)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.frame_30 = QtWidgets.QFrame(self.STOCK3_frame)
        self.frame_30.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_30.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_30.setObjectName("frame_30")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.frame_30)
        self.verticalLayout_14.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.label_28 = QtWidgets.QLabel(self.frame_30)
        self.label_28.setMinimumSize(QtCore.QSize(0, 20))
        self.label_28.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_28.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_28.setObjectName("label_28")
        self.verticalLayout_14.addWidget(self.label_28)
        self.label_35 = QtWidgets.QLabel(self.frame_30)
        self.label_35.setMinimumSize(QtCore.QSize(0, 20))
        self.label_35.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_35.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_35.setObjectName("label_35")
        self.verticalLayout_14.addWidget(self.label_35)
        self.label_37 = QtWidgets.QLabel(self.frame_30)
        self.label_37.setMinimumSize(QtCore.QSize(0, 20))
        self.label_37.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_37.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_37.setObjectName("label_37")
        self.verticalLayout_14.addWidget(self.label_37)
        self.label_38 = QtWidgets.QLabel(self.frame_30)
        self.label_38.setMinimumSize(QtCore.QSize(0, 20))
        self.label_38.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_38.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_38.setObjectName("label_38")
        self.verticalLayout_14.addWidget(self.label_38)
        self.label_33 = QtWidgets.QLabel(self.frame_30)
        self.label_33.setMinimumSize(QtCore.QSize(0, 20))
        self.label_33.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_33.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_33.setObjectName("label_33")
        self.verticalLayout_14.addWidget(self.label_33)
        self.label_34 = QtWidgets.QLabel(self.frame_30)
        self.label_34.setMinimumSize(QtCore.QSize(0, 20))
        self.label_34.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_34.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_34.setObjectName("label_34")
        self.verticalLayout_14.addWidget(self.label_34)
        self.label_32 = QtWidgets.QLabel(self.frame_30)
        self.label_32.setMinimumSize(QtCore.QSize(0, 20))
        self.label_32.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_32.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_32.setObjectName("label_32")
        self.verticalLayout_14.addWidget(self.label_32)
        self.label_31 = QtWidgets.QLabel(self.frame_30)
        self.label_31.setMinimumSize(QtCore.QSize(0, 20))
        self.label_31.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_31.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_31.setObjectName("label_31")
        self.verticalLayout_14.addWidget(self.label_31)
        self.label_30 = QtWidgets.QLabel(self.frame_30)
        self.label_30.setMinimumSize(QtCore.QSize(0, 20))
        self.label_30.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_30.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_30.setObjectName("label_30")
        self.verticalLayout_14.addWidget(self.label_30)
        self.label_36 = QtWidgets.QLabel(self.frame_30)
        self.label_36.setMinimumSize(QtCore.QSize(0, 20))
        self.label_36.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_36.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_36.setObjectName("label_36")
        self.verticalLayout_14.addWidget(self.label_36)
        self.horizontalLayout_14.addWidget(self.frame_30)
        self.frame_31 = QtWidgets.QFrame(self.STOCK3_frame)
        self.frame_31.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_31.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_31.setObjectName("frame_31")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.frame_31)
        self.verticalLayout_15.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.STOCK3_NAME_lineEdit = QtWidgets.QLineEdit(self.frame_31)
        self.STOCK3_NAME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_NAME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_NAME_lineEdit.setObjectName("STOCK3_NAME_lineEdit")
        self.verticalLayout_15.addWidget(self.STOCK3_NAME_lineEdit)
        self.STOCK3_VOLUME_lineEdit = QtWidgets.QLineEdit(self.frame_31)
        self.STOCK3_VOLUME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_VOLUME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_VOLUME_lineEdit.setObjectName("STOCK3_VOLUME_lineEdit")
        self.verticalLayout_15.addWidget(self.STOCK3_VOLUME_lineEdit)
        self.STOCK3_BUY1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_31)
        self.STOCK3_BUY1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_BUY1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_BUY1_PRICE_lineEdit.setObjectName("STOCK3_BUY1_PRICE_lineEdit")
        self.verticalLayout_15.addWidget(self.STOCK3_BUY1_PRICE_lineEdit)
        self.STOCK3_TotalBuy1_label = QtWidgets.QLabel(self.frame_31)
        self.STOCK3_TotalBuy1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_TotalBuy1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_TotalBuy1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK3_TotalBuy1_label.setText("")
        self.STOCK3_TotalBuy1_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK3_TotalBuy1_label.setObjectName("STOCK3_TotalBuy1_label")
        self.verticalLayout_15.addWidget(self.STOCK3_TotalBuy1_label)
        self.STOCK3_SELL1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_31)
        self.STOCK3_SELL1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_SELL1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_SELL1_PRICE_lineEdit.setObjectName("STOCK3_SELL1_PRICE_lineEdit")
        self.verticalLayout_15.addWidget(self.STOCK3_SELL1_PRICE_lineEdit)
        self.STOCK3_TotalSell1_label = QtWidgets.QLabel(self.frame_31)
        self.STOCK3_TotalSell1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_TotalSell1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_TotalSell1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK3_TotalSell1_label.setText("")
        self.STOCK3_TotalSell1_label.setObjectName("STOCK3_TotalSell1_label")
        self.verticalLayout_15.addWidget(self.STOCK3_TotalSell1_label)
        self.STOCK3_BUY2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_31)
        self.STOCK3_BUY2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_BUY2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_BUY2_PRICE_lineEdit.setObjectName("STOCK3_BUY2_PRICE_lineEdit")
        self.verticalLayout_15.addWidget(self.STOCK3_BUY2_PRICE_lineEdit)
        self.STOCK3_TotalBuy2_label = QtWidgets.QLabel(self.frame_31)
        self.STOCK3_TotalBuy2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_TotalBuy2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_TotalBuy2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK3_TotalBuy2_label.setText("")
        self.STOCK3_TotalBuy2_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK3_TotalBuy2_label.setObjectName("STOCK3_TotalBuy2_label")
        self.verticalLayout_15.addWidget(self.STOCK3_TotalBuy2_label)
        self.STOCK3_SELL2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_31)
        self.STOCK3_SELL2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_SELL2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_SELL2_PRICE_lineEdit.setObjectName("STOCK3_SELL2_PRICE_lineEdit")
        self.verticalLayout_15.addWidget(self.STOCK3_SELL2_PRICE_lineEdit)
        self.STOCK3_TotalSell2_label = QtWidgets.QLabel(self.frame_31)
        self.STOCK3_TotalSell2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK3_TotalSell2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK3_TotalSell2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK3_TotalSell2_label.setText("")
        self.STOCK3_TotalSell2_label.setObjectName("STOCK3_TotalSell2_label")
        self.verticalLayout_15.addWidget(self.STOCK3_TotalSell2_label)
        self.horizontalLayout_14.addWidget(self.frame_31)
        self.verticalLayout_6.addWidget(self.STOCK3_frame)
        self.horizontalLayout_2.addWidget(self.frame_10)
        self.verticalLayout.addWidget(self.frame)
        self.frame_7 = QtWidgets.QFrame(self.tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame_7.sizePolicy().hasHeightForWidth())
        self.frame_7.setSizePolicy(sizePolicy)
        self.frame_7.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_7.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_7.setObjectName("frame_7")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout(self.frame_7)
        self.horizontalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_5.setSpacing(0)
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.frame_11 = QtWidgets.QFrame(self.frame_7)
        self.frame_11.setStyleSheet("background-color: rgb(223, 223, 223);")
        self.frame_11.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_11.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_11.setObjectName("frame_11")
        self.verticalLayout_9 = QtWidgets.QVBoxLayout(self.frame_11)
        self.verticalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_9.setSpacing(0)
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.frame_20 = QtWidgets.QFrame(self.frame_11)
        self.frame_20.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_20.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_20.setObjectName("frame_20")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.frame_20)
        self.horizontalLayout_9.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_9.setSpacing(6)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.STOCK4_checkBox = QtWidgets.QCheckBox(self.frame_20)
        self.STOCK4_checkBox.setText("")
        self.STOCK4_checkBox.setObjectName("STOCK4_checkBox")
        self.horizontalLayout_9.addWidget(self.STOCK4_checkBox)
        self.label_40 = QtWidgets.QLabel(self.frame_20)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_40.setFont(font)
        self.label_40.setAlignment(QtCore.Qt.AlignCenter)
        self.label_40.setObjectName("label_40")
        self.horizontalLayout_9.addWidget(self.label_40)
        self.verticalLayout_9.addWidget(self.frame_20, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.STOCK4_frame = QtWidgets.QFrame(self.frame_11)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.STOCK4_frame.sizePolicy().hasHeightForWidth())
        self.STOCK4_frame.setSizePolicy(sizePolicy)
        self.STOCK4_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK4_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.STOCK4_frame.setObjectName("STOCK4_frame")
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout(self.STOCK4_frame)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.frame_32 = QtWidgets.QFrame(self.STOCK4_frame)
        self.frame_32.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_32.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_32.setObjectName("frame_32")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.frame_32)
        self.verticalLayout_16.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.label_39 = QtWidgets.QLabel(self.frame_32)
        self.label_39.setMinimumSize(QtCore.QSize(0, 20))
        self.label_39.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_39.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_39.setObjectName("label_39")
        self.verticalLayout_16.addWidget(self.label_39)
        self.label_47 = QtWidgets.QLabel(self.frame_32)
        self.label_47.setMinimumSize(QtCore.QSize(0, 20))
        self.label_47.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_47.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_47.setObjectName("label_47")
        self.verticalLayout_16.addWidget(self.label_47)
        self.label_48 = QtWidgets.QLabel(self.frame_32)
        self.label_48.setMinimumSize(QtCore.QSize(0, 20))
        self.label_48.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_48.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_48.setObjectName("label_48")
        self.verticalLayout_16.addWidget(self.label_48)
        self.label_49 = QtWidgets.QLabel(self.frame_32)
        self.label_49.setMinimumSize(QtCore.QSize(0, 20))
        self.label_49.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_49.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_49.setObjectName("label_49")
        self.verticalLayout_16.addWidget(self.label_49)
        self.label_44 = QtWidgets.QLabel(self.frame_32)
        self.label_44.setMinimumSize(QtCore.QSize(0, 20))
        self.label_44.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_44.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_44.setObjectName("label_44")
        self.verticalLayout_16.addWidget(self.label_44)
        self.label_45 = QtWidgets.QLabel(self.frame_32)
        self.label_45.setMinimumSize(QtCore.QSize(0, 20))
        self.label_45.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_45.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_45.setObjectName("label_45")
        self.verticalLayout_16.addWidget(self.label_45)
        self.label_43 = QtWidgets.QLabel(self.frame_32)
        self.label_43.setMinimumSize(QtCore.QSize(0, 20))
        self.label_43.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_43.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_43.setObjectName("label_43")
        self.verticalLayout_16.addWidget(self.label_43)
        self.label_42 = QtWidgets.QLabel(self.frame_32)
        self.label_42.setMinimumSize(QtCore.QSize(0, 20))
        self.label_42.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_42.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_42.setObjectName("label_42")
        self.verticalLayout_16.addWidget(self.label_42)
        self.label_41 = QtWidgets.QLabel(self.frame_32)
        self.label_41.setMinimumSize(QtCore.QSize(0, 20))
        self.label_41.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_41.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_41.setObjectName("label_41")
        self.verticalLayout_16.addWidget(self.label_41)
        self.label_46 = QtWidgets.QLabel(self.frame_32)
        self.label_46.setMinimumSize(QtCore.QSize(0, 20))
        self.label_46.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_46.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_46.setObjectName("label_46")
        self.verticalLayout_16.addWidget(self.label_46)
        self.horizontalLayout_15.addWidget(self.frame_32)
        self.frame_33 = QtWidgets.QFrame(self.STOCK4_frame)
        self.frame_33.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_33.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_33.setObjectName("frame_33")
        self.verticalLayout_17 = QtWidgets.QVBoxLayout(self.frame_33)
        self.verticalLayout_17.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.STOCK4_NAME_lineEdit = QtWidgets.QLineEdit(self.frame_33)
        self.STOCK4_NAME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_NAME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_NAME_lineEdit.setObjectName("STOCK4_NAME_lineEdit")
        self.verticalLayout_17.addWidget(self.STOCK4_NAME_lineEdit)
        self.STOCK4_VOLUME_lineEdit = QtWidgets.QLineEdit(self.frame_33)
        self.STOCK4_VOLUME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_VOLUME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_VOLUME_lineEdit.setObjectName("STOCK4_VOLUME_lineEdit")
        self.verticalLayout_17.addWidget(self.STOCK4_VOLUME_lineEdit)
        self.STOCK4_BUY1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_33)
        self.STOCK4_BUY1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_BUY1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_BUY1_PRICE_lineEdit.setObjectName("STOCK4_BUY1_PRICE_lineEdit")
        self.verticalLayout_17.addWidget(self.STOCK4_BUY1_PRICE_lineEdit)
        self.STOCK4_TotalBuy1_label = QtWidgets.QLabel(self.frame_33)
        self.STOCK4_TotalBuy1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_TotalBuy1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_TotalBuy1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK4_TotalBuy1_label.setText("")
        self.STOCK4_TotalBuy1_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK4_TotalBuy1_label.setObjectName("STOCK4_TotalBuy1_label")
        self.verticalLayout_17.addWidget(self.STOCK4_TotalBuy1_label)
        self.STOCK4_SELL1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_33)
        self.STOCK4_SELL1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_SELL1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_SELL1_PRICE_lineEdit.setObjectName("STOCK4_SELL1_PRICE_lineEdit")
        self.verticalLayout_17.addWidget(self.STOCK4_SELL1_PRICE_lineEdit)
        self.STOCK4_TotalSell1_label = QtWidgets.QLabel(self.frame_33)
        self.STOCK4_TotalSell1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_TotalSell1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_TotalSell1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK4_TotalSell1_label.setText("")
        self.STOCK4_TotalSell1_label.setObjectName("STOCK4_TotalSell1_label")
        self.verticalLayout_17.addWidget(self.STOCK4_TotalSell1_label)
        self.STOCK4_BUY2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_33)
        self.STOCK4_BUY2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_BUY2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_BUY2_PRICE_lineEdit.setObjectName("STOCK4_BUY2_PRICE_lineEdit")
        self.verticalLayout_17.addWidget(self.STOCK4_BUY2_PRICE_lineEdit)
        self.STOCK4_TotalBuy2_label = QtWidgets.QLabel(self.frame_33)
        self.STOCK4_TotalBuy2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_TotalBuy2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_TotalBuy2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK4_TotalBuy2_label.setText("")
        self.STOCK4_TotalBuy2_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK4_TotalBuy2_label.setObjectName("STOCK4_TotalBuy2_label")
        self.verticalLayout_17.addWidget(self.STOCK4_TotalBuy2_label)
        self.STOCK4_SELL2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_33)
        self.STOCK4_SELL2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_SELL2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_SELL2_PRICE_lineEdit.setObjectName("STOCK4_SELL2_PRICE_lineEdit")
        self.verticalLayout_17.addWidget(self.STOCK4_SELL2_PRICE_lineEdit)
        self.STOCK4_TotalSell2_label = QtWidgets.QLabel(self.frame_33)
        self.STOCK4_TotalSell2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK4_TotalSell2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK4_TotalSell2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK4_TotalSell2_label.setText("")
        self.STOCK4_TotalSell2_label.setObjectName("STOCK4_TotalSell2_label")
        self.verticalLayout_17.addWidget(self.STOCK4_TotalSell2_label)
        self.horizontalLayout_15.addWidget(self.frame_33)
        self.verticalLayout_9.addWidget(self.STOCK4_frame)
        self.horizontalLayout_5.addWidget(self.frame_11)
        self.frame_12 = QtWidgets.QFrame(self.frame_7)
        self.frame_12.setStyleSheet("background-color: rgb(247, 247, 247);")
        self.frame_12.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_12.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_12.setObjectName("frame_12")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout(self.frame_12)
        self.verticalLayout_8.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_8.setSpacing(0)
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.frame_22 = QtWidgets.QFrame(self.frame_12)
        self.frame_22.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_22.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_22.setObjectName("frame_22")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout(self.frame_22)
        self.horizontalLayout_10.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_10.setSpacing(6)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.STOCK5_checkBox = QtWidgets.QCheckBox(self.frame_22)
        self.STOCK5_checkBox.setText("")
        self.STOCK5_checkBox.setObjectName("STOCK5_checkBox")
        self.horizontalLayout_10.addWidget(self.STOCK5_checkBox)
        self.label_51 = QtWidgets.QLabel(self.frame_22)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_51.setFont(font)
        self.label_51.setAlignment(QtCore.Qt.AlignCenter)
        self.label_51.setObjectName("label_51")
        self.horizontalLayout_10.addWidget(self.label_51)
        self.verticalLayout_8.addWidget(self.frame_22, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.STOCK5_frame = QtWidgets.QFrame(self.frame_12)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.STOCK5_frame.sizePolicy().hasHeightForWidth())
        self.STOCK5_frame.setSizePolicy(sizePolicy)
        self.STOCK5_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK5_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.STOCK5_frame.setObjectName("STOCK5_frame")
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout(self.STOCK5_frame)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.frame_34 = QtWidgets.QFrame(self.STOCK5_frame)
        self.frame_34.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_34.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_34.setObjectName("frame_34")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(self.frame_34)
        self.verticalLayout_18.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.label_50 = QtWidgets.QLabel(self.frame_34)
        self.label_50.setMinimumSize(QtCore.QSize(0, 20))
        self.label_50.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_50.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_50.setObjectName("label_50")
        self.verticalLayout_18.addWidget(self.label_50)
        self.label_58 = QtWidgets.QLabel(self.frame_34)
        self.label_58.setMinimumSize(QtCore.QSize(0, 20))
        self.label_58.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_58.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_58.setObjectName("label_58")
        self.verticalLayout_18.addWidget(self.label_58)
        self.label_59 = QtWidgets.QLabel(self.frame_34)
        self.label_59.setMinimumSize(QtCore.QSize(0, 20))
        self.label_59.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_59.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_59.setObjectName("label_59")
        self.verticalLayout_18.addWidget(self.label_59)
        self.label_60 = QtWidgets.QLabel(self.frame_34)
        self.label_60.setMinimumSize(QtCore.QSize(0, 20))
        self.label_60.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_60.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_60.setObjectName("label_60")
        self.verticalLayout_18.addWidget(self.label_60)
        self.label_55 = QtWidgets.QLabel(self.frame_34)
        self.label_55.setMinimumSize(QtCore.QSize(0, 20))
        self.label_55.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_55.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_55.setObjectName("label_55")
        self.verticalLayout_18.addWidget(self.label_55)
        self.label_56 = QtWidgets.QLabel(self.frame_34)
        self.label_56.setMinimumSize(QtCore.QSize(0, 20))
        self.label_56.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_56.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_56.setObjectName("label_56")
        self.verticalLayout_18.addWidget(self.label_56)
        self.label_54 = QtWidgets.QLabel(self.frame_34)
        self.label_54.setMinimumSize(QtCore.QSize(0, 20))
        self.label_54.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_54.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_54.setObjectName("label_54")
        self.verticalLayout_18.addWidget(self.label_54)
        self.label_53 = QtWidgets.QLabel(self.frame_34)
        self.label_53.setMinimumSize(QtCore.QSize(0, 20))
        self.label_53.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_53.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_53.setObjectName("label_53")
        self.verticalLayout_18.addWidget(self.label_53)
        self.label_52 = QtWidgets.QLabel(self.frame_34)
        self.label_52.setMinimumSize(QtCore.QSize(0, 20))
        self.label_52.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_52.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_52.setObjectName("label_52")
        self.verticalLayout_18.addWidget(self.label_52)
        self.label_57 = QtWidgets.QLabel(self.frame_34)
        self.label_57.setMinimumSize(QtCore.QSize(0, 20))
        self.label_57.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_57.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_57.setObjectName("label_57")
        self.verticalLayout_18.addWidget(self.label_57)
        self.horizontalLayout_16.addWidget(self.frame_34)
        self.frame_35 = QtWidgets.QFrame(self.STOCK5_frame)
        self.frame_35.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_35.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_35.setObjectName("frame_35")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.frame_35)
        self.verticalLayout_19.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.STOCK5_NAME_lineEdit = QtWidgets.QLineEdit(self.frame_35)
        self.STOCK5_NAME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_NAME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_NAME_lineEdit.setObjectName("STOCK5_NAME_lineEdit")
        self.verticalLayout_19.addWidget(self.STOCK5_NAME_lineEdit)
        self.STOCK5_VOLUME_lineEdit = QtWidgets.QLineEdit(self.frame_35)
        self.STOCK5_VOLUME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_VOLUME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_VOLUME_lineEdit.setObjectName("STOCK5_VOLUME_lineEdit")
        self.verticalLayout_19.addWidget(self.STOCK5_VOLUME_lineEdit)
        self.STOCK5_BUY1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_35)
        self.STOCK5_BUY1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_BUY1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_BUY1_PRICE_lineEdit.setObjectName("STOCK5_BUY1_PRICE_lineEdit")
        self.verticalLayout_19.addWidget(self.STOCK5_BUY1_PRICE_lineEdit)
        self.STOCK5_TotalBuy1_label = QtWidgets.QLabel(self.frame_35)
        self.STOCK5_TotalBuy1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_TotalBuy1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_TotalBuy1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK5_TotalBuy1_label.setText("")
        self.STOCK5_TotalBuy1_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK5_TotalBuy1_label.setObjectName("STOCK5_TotalBuy1_label")
        self.verticalLayout_19.addWidget(self.STOCK5_TotalBuy1_label)
        self.STOCK5_SELL1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_35)
        self.STOCK5_SELL1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_SELL1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_SELL1_PRICE_lineEdit.setObjectName("STOCK5_SELL1_PRICE_lineEdit")
        self.verticalLayout_19.addWidget(self.STOCK5_SELL1_PRICE_lineEdit)
        self.STOCK5_TotalSell1_label = QtWidgets.QLabel(self.frame_35)
        self.STOCK5_TotalSell1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_TotalSell1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_TotalSell1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK5_TotalSell1_label.setText("")
        self.STOCK5_TotalSell1_label.setObjectName("STOCK5_TotalSell1_label")
        self.verticalLayout_19.addWidget(self.STOCK5_TotalSell1_label)
        self.STOCK5_BUY2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_35)
        self.STOCK5_BUY2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_BUY2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_BUY2_PRICE_lineEdit.setObjectName("STOCK5_BUY2_PRICE_lineEdit")
        self.verticalLayout_19.addWidget(self.STOCK5_BUY2_PRICE_lineEdit)
        self.STOCK5_TotalBuy2_label = QtWidgets.QLabel(self.frame_35)
        self.STOCK5_TotalBuy2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_TotalBuy2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_TotalBuy2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK5_TotalBuy2_label.setText("")
        self.STOCK5_TotalBuy2_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK5_TotalBuy2_label.setObjectName("STOCK5_TotalBuy2_label")
        self.verticalLayout_19.addWidget(self.STOCK5_TotalBuy2_label)
        self.STOCK5_SELL2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_35)
        self.STOCK5_SELL2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_SELL2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_SELL2_PRICE_lineEdit.setObjectName("STOCK5_SELL2_PRICE_lineEdit")
        self.verticalLayout_19.addWidget(self.STOCK5_SELL2_PRICE_lineEdit)
        self.STOCK5_TotalSell2_label = QtWidgets.QLabel(self.frame_35)
        self.STOCK5_TotalSell2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK5_TotalSell2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK5_TotalSell2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK5_TotalSell2_label.setText("")
        self.STOCK5_TotalSell2_label.setObjectName("STOCK5_TotalSell2_label")
        self.verticalLayout_19.addWidget(self.STOCK5_TotalSell2_label)
        self.horizontalLayout_16.addWidget(self.frame_35)
        self.verticalLayout_8.addWidget(self.STOCK5_frame)
        self.horizontalLayout_5.addWidget(self.frame_12)
        self.frame_13 = QtWidgets.QFrame(self.frame_7)
        self.frame_13.setStyleSheet("background-color: rgb(223, 223, 223);")
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout(self.frame_13)
        self.verticalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_7.setSpacing(0)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.frame_24 = QtWidgets.QFrame(self.frame_13)
        self.frame_24.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_24.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_24.setObjectName("frame_24")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.frame_24)
        self.horizontalLayout_11.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_11.setSpacing(6)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.STOCK6_checkBox = QtWidgets.QCheckBox(self.frame_24)
        self.STOCK6_checkBox.setText("")
        self.STOCK6_checkBox.setObjectName("STOCK6_checkBox")
        self.horizontalLayout_11.addWidget(self.STOCK6_checkBox)
        self.label_62 = QtWidgets.QLabel(self.frame_24)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_62.setFont(font)
        self.label_62.setAlignment(QtCore.Qt.AlignCenter)
        self.label_62.setObjectName("label_62")
        self.horizontalLayout_11.addWidget(self.label_62)
        self.verticalLayout_7.addWidget(self.frame_24, 0, QtCore.Qt.AlignHCenter | QtCore.Qt.AlignTop)
        self.STOCK6_frame = QtWidgets.QFrame(self.frame_13)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.STOCK6_frame.sizePolicy().hasHeightForWidth())
        self.STOCK6_frame.setSizePolicy(sizePolicy)
        self.STOCK6_frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK6_frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.STOCK6_frame.setObjectName("STOCK6_frame")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout(self.STOCK6_frame)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.frame_36 = QtWidgets.QFrame(self.STOCK6_frame)
        self.frame_36.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_36.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_36.setObjectName("frame_36")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.frame_36)
        self.verticalLayout_20.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.label_61 = QtWidgets.QLabel(self.frame_36)
        self.label_61.setMinimumSize(QtCore.QSize(0, 20))
        self.label_61.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_61.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_61.setObjectName("label_61")
        self.verticalLayout_20.addWidget(self.label_61)
        self.label_69 = QtWidgets.QLabel(self.frame_36)
        self.label_69.setMinimumSize(QtCore.QSize(0, 20))
        self.label_69.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_69.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_69.setObjectName("label_69")
        self.verticalLayout_20.addWidget(self.label_69)
        self.label_70 = QtWidgets.QLabel(self.frame_36)
        self.label_70.setMinimumSize(QtCore.QSize(0, 20))
        self.label_70.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_70.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_70.setObjectName("label_70")
        self.verticalLayout_20.addWidget(self.label_70)
        self.label_71 = QtWidgets.QLabel(self.frame_36)
        self.label_71.setMinimumSize(QtCore.QSize(0, 20))
        self.label_71.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_71.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_71.setObjectName("label_71")
        self.verticalLayout_20.addWidget(self.label_71)
        self.label_66 = QtWidgets.QLabel(self.frame_36)
        self.label_66.setMinimumSize(QtCore.QSize(0, 20))
        self.label_66.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_66.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_66.setObjectName("label_66")
        self.verticalLayout_20.addWidget(self.label_66)
        self.label_67 = QtWidgets.QLabel(self.frame_36)
        self.label_67.setMinimumSize(QtCore.QSize(0, 20))
        self.label_67.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_67.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_67.setObjectName("label_67")
        self.verticalLayout_20.addWidget(self.label_67)
        self.label_65 = QtWidgets.QLabel(self.frame_36)
        self.label_65.setMinimumSize(QtCore.QSize(0, 20))
        self.label_65.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_65.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_65.setObjectName("label_65")
        self.verticalLayout_20.addWidget(self.label_65)
        self.label_64 = QtWidgets.QLabel(self.frame_36)
        self.label_64.setMinimumSize(QtCore.QSize(0, 20))
        self.label_64.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_64.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_64.setObjectName("label_64")
        self.verticalLayout_20.addWidget(self.label_64)
        self.label_63 = QtWidgets.QLabel(self.frame_36)
        self.label_63.setMinimumSize(QtCore.QSize(0, 20))
        self.label_63.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_63.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_63.setObjectName("label_63")
        self.verticalLayout_20.addWidget(self.label_63)
        self.label_68 = QtWidgets.QLabel(self.frame_36)
        self.label_68.setMinimumSize(QtCore.QSize(0, 20))
        self.label_68.setMaximumSize(QtCore.QSize(16777215, 20))
        self.label_68.setAlignment(QtCore.Qt.AlignRight | QtCore.Qt.AlignTrailing | QtCore.Qt.AlignVCenter)
        self.label_68.setObjectName("label_68")
        self.verticalLayout_20.addWidget(self.label_68)
        self.horizontalLayout_17.addWidget(self.frame_36)
        self.frame_37 = QtWidgets.QFrame(self.STOCK6_frame)
        self.frame_37.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_37.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_37.setObjectName("frame_37")
        self.verticalLayout_21 = QtWidgets.QVBoxLayout(self.frame_37)
        self.verticalLayout_21.setContentsMargins(3, 3, 3, 3)
        self.verticalLayout_21.setSpacing(6)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.STOCK6_NAME_lineEdit = QtWidgets.QLineEdit(self.frame_37)
        self.STOCK6_NAME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_NAME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_NAME_lineEdit.setObjectName("STOCK6_NAME_lineEdit")
        self.verticalLayout_21.addWidget(self.STOCK6_NAME_lineEdit)
        self.STOCK6_VOLUME_lineEdit = QtWidgets.QLineEdit(self.frame_37)
        self.STOCK6_VOLUME_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_VOLUME_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_VOLUME_lineEdit.setObjectName("STOCK6_VOLUME_lineEdit")
        self.verticalLayout_21.addWidget(self.STOCK6_VOLUME_lineEdit)
        self.STOCK6_BUY1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_37)
        self.STOCK6_BUY1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_BUY1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_BUY1_PRICE_lineEdit.setObjectName("STOCK6_BUY1_PRICE_lineEdit")
        self.verticalLayout_21.addWidget(self.STOCK6_BUY1_PRICE_lineEdit)
        self.STOCK6_TotalBuy1_label = QtWidgets.QLabel(self.frame_37)
        self.STOCK6_TotalBuy1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_TotalBuy1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_TotalBuy1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK6_TotalBuy1_label.setText("")
        self.STOCK6_TotalBuy1_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK6_TotalBuy1_label.setObjectName("STOCK6_TotalBuy1_label")
        self.verticalLayout_21.addWidget(self.STOCK6_TotalBuy1_label)
        self.STOCK6_SELL1_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_37)
        self.STOCK6_SELL1_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_SELL1_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_SELL1_PRICE_lineEdit.setObjectName("STOCK6_SELL1_PRICE_lineEdit")
        self.verticalLayout_21.addWidget(self.STOCK6_SELL1_PRICE_lineEdit)
        self.STOCK6_TotalSell1_label = QtWidgets.QLabel(self.frame_37)
        self.STOCK6_TotalSell1_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_TotalSell1_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_TotalSell1_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK6_TotalSell1_label.setText("")
        self.STOCK6_TotalSell1_label.setObjectName("STOCK6_TotalSell1_label")
        self.verticalLayout_21.addWidget(self.STOCK6_TotalSell1_label)
        self.STOCK6_BUY2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_37)
        self.STOCK6_BUY2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_BUY2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_BUY2_PRICE_lineEdit.setObjectName("STOCK6_BUY2_PRICE_lineEdit")
        self.verticalLayout_21.addWidget(self.STOCK6_BUY2_PRICE_lineEdit)
        self.STOCK6_TotalBuy2_label = QtWidgets.QLabel(self.frame_37)
        self.STOCK6_TotalBuy2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_TotalBuy2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_TotalBuy2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK6_TotalBuy2_label.setText("")
        self.STOCK6_TotalBuy2_label.setAlignment(QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignVCenter)
        self.STOCK6_TotalBuy2_label.setObjectName("STOCK6_TotalBuy2_label")
        self.verticalLayout_21.addWidget(self.STOCK6_TotalBuy2_label)
        self.STOCK6_SELL2_PRICE_lineEdit = QtWidgets.QLineEdit(self.frame_37)
        self.STOCK6_SELL2_PRICE_lineEdit.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_SELL2_PRICE_lineEdit.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_SELL2_PRICE_lineEdit.setObjectName("STOCK6_SELL2_PRICE_lineEdit")
        self.verticalLayout_21.addWidget(self.STOCK6_SELL2_PRICE_lineEdit)
        self.STOCK6_TotalSell2_label = QtWidgets.QLabel(self.frame_37)
        self.STOCK6_TotalSell2_label.setMinimumSize(QtCore.QSize(0, 20))
        self.STOCK6_TotalSell2_label.setMaximumSize(QtCore.QSize(16777215, 20))
        self.STOCK6_TotalSell2_label.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.STOCK6_TotalSell2_label.setText("")
        self.STOCK6_TotalSell2_label.setObjectName("STOCK6_TotalSell2_label")
        self.verticalLayout_21.addWidget(self.STOCK6_TotalSell2_label)
        self.horizontalLayout_17.addWidget(self.frame_37)
        self.verticalLayout_7.addWidget(self.STOCK6_frame)
        self.horizontalLayout_5.addWidget(self.frame_13)
        self.verticalLayout.addWidget(self.frame_7)
        self.tabWidget.addTab(self.tab, "")
        self.tab_2 = QtWidgets.QWidget()
        self.tab_2.setObjectName("tab_2")
        self.comboBox = QtWidgets.QComboBox(self.tab_2)
        self.comboBox.setGeometry(QtCore.QRect(10, 20, 91, 21))
        self.comboBox.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.RunAlgo_pushButton = QtWidgets.QPushButton(self.tab_2)
        self.RunAlgo_pushButton.setGeometry(QtCore.QRect(180, 110, 91, 51))
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.RunAlgo_pushButton.setFont(font)
        self.RunAlgo_pushButton.setObjectName("RunAlgo_pushButton")
        self.line_7 = QtWidgets.QFrame(self.tab_2)
        self.line_7.setGeometry(QtCore.QRect(180, 190, 231, 20))
        self.line_7.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_7.setMidLineWidth(10)
        self.line_7.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_7.setObjectName("line_7")
        self.label_11 = QtWidgets.QLabel(self.tab_2)
        self.label_11.setGeometry(QtCore.QRect(310, 170, 101, 31))
        self.label_11.setAlignment(QtCore.Qt.AlignCenter)
        self.label_11.setObjectName("label_11")
        self.line_5 = QtWidgets.QFrame(self.tab_2)
        self.line_5.setGeometry(QtCore.QRect(280, 110, 20, 351))
        self.line_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_5.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_5.setObjectName("line_5")
        self.algoRecommendation_listWidget = QtWidgets.QListWidget(self.tab_2)
        self.algoRecommendation_listWidget.setGeometry(QtCore.QRect(310, 210, 101, 251))
        self.algoRecommendation_listWidget.setObjectName("algoRecommendation_listWidget")
        self.label_10 = QtWidgets.QLabel(self.tab_2)
        self.label_10.setGeometry(QtCore.QRect(180, 170, 91, 31))
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.mostActiveStocks_listWidget = QtWidgets.QListWidget(self.tab_2)
        self.mostActiveStocks_listWidget.setGeometry(QtCore.QRect(180, 210, 91, 251))
        self.mostActiveStocks_listWidget.setObjectName("mostActiveStocks_listWidget")
        self.groupBox_2 = QtWidgets.QGroupBox(self.tab_2)
        self.groupBox_2.setGeometry(QtCore.QRect(180, 60, 231, 41))
        self.groupBox_2.setObjectName("groupBox_2")
        self.pesobility_radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.pesobility_radioButton.setGeometry(QtCore.QRect(10, 20, 82, 17))
        self.pesobility_radioButton.setChecked(True)
        self.pesobility_radioButton.setObjectName("pesobility_radioButton")
        self.pse_radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.pse_radioButton.setGeometry(QtCore.QRect(100, 20, 51, 20))
        self.pse_radioButton.setObjectName("pse_radioButton")
        self.notepad_radioButton = QtWidgets.QRadioButton(self.groupBox_2)
        self.notepad_radioButton.setGeometry(QtCore.QRect(160, 20, 71, 20))
        self.notepad_radioButton.setObjectName("notepad_radioButton")
        self.ShowGraph_pushButton = QtWidgets.QPushButton(self.tab_2)
        self.ShowGraph_pushButton.setGeometry(QtCore.QRect(310, 110, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ShowGraph_pushButton.setFont(font)
        self.ShowGraph_pushButton.setObjectName("ShowGraph_pushButton")
        self.ShowGraphStockToAnalyze_pushButton = QtWidgets.QPushButton(self.tab_2)
        self.ShowGraphStockToAnalyze_pushButton.setGeometry(QtCore.QRect(450, 110, 101, 51))
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ShowGraphStockToAnalyze_pushButton.setFont(font)
        self.ShowGraphStockToAnalyze_pushButton.setObjectName("ShowGraphStockToAnalyze_pushButton")
        self.line_6 = QtWidgets.QFrame(self.tab_2)
        self.line_6.setGeometry(QtCore.QRect(420, 110, 20, 351))
        self.line_6.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_6.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_6.setObjectName("line_6")
        self.stockToAnalyze_lineEdit = QtWidgets.QLineEdit(self.tab_2)
        self.stockToAnalyze_lineEdit.setGeometry(QtCore.QRect(450, 170, 101, 31))
        self.stockToAnalyze_lineEdit.setObjectName("stockToAnalyze_lineEdit")
        self.tabWidget.addTab(self.tab_2, "")
        self.verticalLayout_3.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 653, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # ***** John Start Copy *****   ShowGraphStockToAnalyze_pushButton

        # self.START_pushButton.clicked.connect(lambda: START(option=(ui.comboBox.currentText())))    # START button
        self.START_pushButton.clicked.connect(lambda: self.START_Button())  # START button
        self.RunAlgo_pushButton.clicked.connect(
            lambda: self.getMostActivePesobility())  # # ALGO button get most active stocks pesobility/pse/notepad
        self.RunAlgo_pushButton.clicked.connect(
            lambda: self.algoDoubleVolume95PercentAverage())  # ALGO button do checking
        self.ShowGraph_pushButton.clicked.connect(
            lambda: self.generate_plot(algoPick3DArray=glob_mostActiveDoubleVolume3DArray))  # GRAPH button
        self.ShowGraphStockToAnalyze_pushButton.clicked.connect(
            lambda: self.stockToAnalyze())  # custom stock button to analyze generate 3D Array
        # self.ShowGraphStockToAnalyze_pushButton.clicked.connect(lambda: self.generate_plot(algoPick3DArray=glob_stockToAnalyze3DArray))  # Custom stock graph button

        # if self.STOCK1_BUY1_PRICE_lineEdit.textChanged

        # ****************************
        # ** FUNCTIONS ALGO | Graph **
        # ****************************
        # loop to get the list of most active stocks --> Tested 100% Working

    def getMostActivePesobility(self, site="pesobility"):
        global glob_mostActiveSymbol

        glob_mostActiveSymbol = []
        self.mostActiveStocks_listWidget.clear()

        if self.pesobility_radioButton.isChecked():
            # pesobility most active link more than 10 compared to PSE
            browser.get(websitePesobility_MostActive)  # pesobility
            browser.switch_to.default_content()  # pesobility
            wait.until(EC.visibility_of_element_located((By.XPATH, pesobility_xpathHeader)))  # pesobility
        elif self.pse_radioButton.isChecked():
            # Most Active - get 10 most active stocks using "PSE"
            browser.get(websitePSE_MostActive)  # PSE
            browser.switch_to.default_content()

            # iframe_MostActive using "PSE"
            wait.until(EC.visibility_of_element_located((By.XPATH, pse_xpathIframeMostActive)))  # PSE
            iframe_MostActive = browser.find_element(by=By.XPATH, value=pse_xpathIframeMostActive)  # PSE
            browser.switch_to.frame(iframe_MostActive)  # PSE

            # Symbol Name
            wait.until(EC.visibility_of_element_located((By.XPATH, pse_xpathHeaderSymbolName)))  # PSE

        i = 0
        while True:
            try:
                if self.pesobility_radioButton.isChecked():
                    glob_mostActiveSymbol.append(browser.find_element(by=By.XPATH, value=pesobility_xpathMostActive % (
                            i + 1)).text)  # pesobility
                elif self.pse_radioButton.isChecked():
                    glob_mostActiveSymbol.append(
                        browser.find_element(by=By.XPATH, value=pse_xpathMostActive % (i + 1)).text)  # PSE
                else:  # this is for checking the list in notepad (notepad manually created)
                    # all stocks as per COL paste in notepad
                    manualAllColListFullPath = os.getcwd() + "\\ALL_COL_List.txt"
                    if os.path.isfile(manualAllColListFullPath):
                        with open(manualAllColListFullPath, 'r') as (f):
                            for item in f.readlines():
                                if item != "":
                                    glob_mostActiveSymbol.append(item.rstrip('\n'))
                        break
            except:
                logging.error("no more active stock available")
                break
            else:
                i += 1

        self.mostActiveStocks_listWidget.addItems(glob_mostActiveSymbol)

        # algo to get suggested stock code --> Tested 100% Working

    def algoDoubleVolume95PercentAverage(self):
        global glob_mostActiveDoubleVolume3DArray

        glob_mostActiveDoubleVolume3DArray = []
        self.algoRecommendation_listWidget.clear()

        wait = WebDriverWait(browser, 5)

        for glob_activeName in glob_mostActiveSymbol:
            pseLinkWithSymbol = False
            try:
                browser.get(websitePSEhistoricalData_StockName + glob_activeName)
                if not self.goToiFrame(iframe=pse_xpathIframeHistoricalData):
                    return 0
            except:
                logging.error("PSE link + Stock code failed: " + glob_activeName)
            else:
                pseLinkWithSymbol = True
            if not pseLinkWithSymbol:
                continue

            mostActiveAverageArray = []
            mostActiveVolumeArray = []
            have_historicalData = False
            complete_historicalData = False
            for i in range(1, 4):
                # Page 1-3 on historical data
                firstVolumeCounter_perPage = ((i - 1) * 10) + 1
                try:
                    page_button = browser.find_element(by=By.XPATH, value=pse_xpathPageNumberHistoricalData % i)
                    if page_button.text != "":
                        page_button.click()
                    # check if first volume data available
                    wait.until(EC.visibility_of_element_located(
                        (By.XPATH, pse_xpathFirstVolDataAvailable % firstVolumeCounter_perPage)))
                except:
                    if i == 1:
                        logging.error("no historical data..skipping stock symbol: " + glob_activeName)
                    else:
                        logging.error("did not complete 3 pages of historical data: " + glob_activeName)
                    break
                for j in range(10):  # make 10 attempts if avg price and avg vol is ""
                    # try:
                    firstAvgValCheck = ""
                    firstVolValCheck = ""
                    retry_count = 0
                    counter = (10 * (i - 1)) + (j + 1)
                    # Average and Volume check if not empty else go loop to get correct value
                    while firstAvgValCheck == "" or firstVolValCheck == "":
                        try:
                            # Average value
                            firstAvgValCheck = browser.find_element(by=By.XPATH,
                                                                    value=pse_xpathAveragePriceValue % counter).text
                            # Volume value
                            firstVolValCheck = browser.find_element(by=By.XPATH,
                                                                    value=pse_xpathAverageVolValue % counter).text
                            if firstAvgValCheck == "" or firstVolValCheck == "":
                                logging.error("check empty string rety: " + glob_activeName)
                            else:
                                have_historicalData = True
                                # append average
                                mostActiveAverageArray.append(float(firstAvgValCheck.replace(",", "")))
                                # append volume
                                mostActiveVolumeArray.append(int(firstVolValCheck.replace(",", "")))
                        except:
                            retry_count += 1
                            logging.error("did not find element for average and volume try: " + str(retry_count))
                            if retry_count > 9:
                                break
                    if firstAvgValCheck == "" or firstVolValCheck == "":
                        logging.error("did not complete 10 historical data in a page: " + glob_activeName)
                        break
            if have_historicalData:
                # get the last 29 average volume to compare with the latest volume
                sumVolume29days = 0
                for i in range(1, len(mostActiveVolumeArray)):
                    try:
                        sumVolume29days = sumVolume29days + mostActiveVolumeArray[i]
                    except:
                        logging.error("Error with int value base 10 for sum of volume for 29 days: " + glob_activeName)
                mostActiveDoubleVolume2DArray = []  # [stockX, [averageX], [volumeX]]
                averageVolume29Days = 0.00
                if len(mostActiveVolumeArray) != 1:
                    averageVolume29Days = round(sumVolume29days / (len(mostActiveVolumeArray) - 1), 2)
                    if averageVolume29Days != 0:
                        # check if current volume has more than doubled the average volume of last 29 days
                        volume_factor = round(mostActiveVolumeArray[0] / averageVolume29Days, 2)
                        if volume_factor > 2:
                            if mostActiveAverageArray[0] * mostActiveVolumeArray[0] > 10000000:  # 10M
                                # if mostActiveAverageArray[0] * mostActiveVolumeArray[0] > 5000000:  # 5M
                                # if mostActiveAverageArray[0] * mostActiveVolumeArray[0] > 1000000:  # 1M
                                sumAveragePrice = 0
                                for avgPrice in mostActiveAverageArray:
                                    sumAveragePrice += avgPrice
                                averagePrice30days95percent = '{0:.5f}'.format(
                                    sumAveragePrice / len(mostActiveAverageArray) * 0.95).rstrip('0')
                                if float(averagePrice30days95percent) > mostActiveAverageArray[0]:
                                    print("ALGO suggest: " + glob_activeName)
                                    mostActiveDoubleVolume2DArray.append(glob_activeName)
                                    mostActiveDoubleVolume2DArray.append(
                                        str('{0:.5f}'.format(mostActiveAverageArray[0] * 0.95)).rstrip(
                                            '0'))  # Buy Price
                                    mostActiveDoubleVolume2DArray.append(
                                        str('{0:.5f}'.format(mostActiveAverageArray[0] * 1.05)).rstrip(
                                            '0'))  # Sell Price
                                    mostActiveDoubleVolume2DArray.append(averagePrice30days95percent)
                                    mostActiveDoubleVolume2DArray.append(mostActiveAverageArray)
                                    mostActiveDoubleVolume2DArray.append(mostActiveVolumeArray)
                                    glob_mostActiveDoubleVolume3DArray.append(mostActiveDoubleVolume2DArray)

                                    self.algoRecommendation_listWidget.addItem(glob_activeName)

        # generate avg price vs. avg volume --> Tested 100% Working

    def generate_plot(self, algoPick3DArray, _stockName=""):
        try:
            x_axis = []
            ##### Structure of 2D array #####
            if _stockName != "":
                stockName = self.stockToAnalyze_lineEdit.text()
            else:
                stockName = self.algoRecommendation_listWidget.currentItem().text()
            # buyTarget
            # sellTarget
            # avgPrice30Days95percent
            # average_price = []
            # average_volume = []

            for arr2d in algoPick3DArray:  # 3D
                if stockName in arr2d:
                    buyTarget = arr2d[1]
                    sellTarget = arr2d[2]
                    avgPrice30Days95percent = arr2d[3]
                    average_price = arr2d[4]
                    average_volume = arr2d[5]
                    break

            for i in range(1, len(arr2d[5]) + 1):
                x_axis.append(int(i))

            # Sample format for this to work
            """x = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]
            average_price = [1.51, 1.61, 1.61, 1.63, 1.73, 1.78, 1.80, 1.81, 1.80, 1.79, 1.78, 1.75, 1.77, 1.80, 1.79, 1.76,
                             1.74, 1.74, 1.70, 1.72, 1.79, 1.78, 1.77, 1.74, 1.81, 1.86, 1.85, 1.84, 1.82, 1.82]
            average_volume = [24327000, 13569000, 6564000, 10527000, 6349000, 5310000, 4382000, 13996000, 6429000, 4965000,
                              13319000, 1444000, 9028000, 6152000, 5566000, 4734000, 6402000, 4240000, 8233000, 3001000,
                              5304000, 5089000, 4966000, 7800000, 8815000, 4220000, 6572000, 10401000, 7863000, 10470000]"""

            # Create figure and axis #1
            fig, ax1 = plt.subplots()
            fig.suptitle(
                "Algo Pick: " + stockName + " * 95%x30DaysAveragePrice: " + avgPrice30Days95percent + " *\n" + " Buy: " + buyTarget + " < | " +
                str(average_price[0]) + " | < Sell: " + sellTarget, fontsize=12)

            # plot line chart on axis #1
            # ax1.plot(x, average_price)
            ax1.plot(x_axis, average_price)
            ax1.set_ylabel('average price')
            ax1.autoscale()
            ax1.legend(['average_price'], loc='upper right', bbox_to_anchor=(0.3, -0.05),
                       fancybox=True, shadow=True, ncol=5)

            # set up the 2nd axis
            ax2 = ax1.twinx()

            # plot bar chart on axis #2
            ax2.bar(x_axis, average_volume, width=0.5, alpha=0.5, color='orange')
            ax2.grid(False)  # turn off grid #2
            ax2.set_ylabel('average volume')
            ax2.autoscale()
            ax2.legend(['average_volume'], loc='upper left', bbox_to_anchor=(0.5, -0.05),
                       fancybox=True, shadow=True, ncol=5)

            plt.show()
        except:
            logging.error("Please select one Stock Code from Algo Suggestion")

        # make 3D array for stock code to be analyze then pass to generate plot

    def stockToAnalyze(self):
        global glob_stockToAnalyze3DArray

        glob_stockToAnalyze3DArray = []

        wait = WebDriverWait(browser, 5)

        glob_activeName = self.stockToAnalyze_lineEdit.text()
        pseLinkWithSymbol = False
        try:
            browser.get(websitePSEhistoricalData_StockName + glob_activeName)
            if not self.goToiFrame(iframe=pse_xpathIframeHistoricalData):
                return 0
        except:
            logging.error("PSE link + Stock code failed: " + glob_activeName)
        else:
            pseLinkWithSymbol = True

        stockAnalyzeAverageArray = []
        stockAnalyzeVolumeArray = []
        have_historicalData = False
        for i in range(1, 4):
            # Page 1-3 on historical data
            firstVolumeCounter_perPage = ((i - 1) * 10) + 1
            try:
                page_button = browser.find_element(by=By.XPATH, value=pse_xpathPageNumberHistoricalData % i)
                if page_button.text != "":
                    page_button.click()
                # check if first volume data available
                wait.until(EC.visibility_of_element_located(
                    (By.XPATH, pse_xpathFirstVolDataAvailable % firstVolumeCounter_perPage)))
            except:
                if i == 1:
                    logging.error("no historical data..skipping stock symbol: " + glob_activeName)
                else:
                    logging.error("did not complete 3 pages of historical data: " + glob_activeName)
                break
            for j in range(10):  # make 10 attempts if avg price and avg vol is ""
                # try:
                firstAvgValCheck = ""
                firstVolValCheck = ""
                retry_count = 0
                counter = (10 * (i - 1)) + (j + 1)
                # Average and Volume check if not empty else go loop to get correct value
                while firstAvgValCheck == "" or firstVolValCheck == "":
                    try:
                        # Average value
                        firstAvgValCheck = browser.find_element(by=By.XPATH,
                                                                value=pse_xpathAveragePriceValue % counter).text
                        # Volume value
                        firstVolValCheck = browser.find_element(by=By.XPATH,
                                                                value=pse_xpathAverageVolValue % counter).text
                        if firstAvgValCheck == "" or firstVolValCheck == "":
                            logging.error("check empty string rety: " + glob_activeName)
                        else:
                            have_historicalData = True
                            # append average
                            stockAnalyzeAverageArray.append(float(firstAvgValCheck.replace(",", "")))
                            # append volume
                            stockAnalyzeVolumeArray.append(int(firstVolValCheck.replace(",", "")))
                    except:
                        retry_count += 1
                        logging.error("did not find element for average and volume try: " + str(retry_count))
                        if retry_count > 9:
                            break
                if firstAvgValCheck == "" or firstVolValCheck == "":
                    logging.error("did not complete 10 historical data in a page: " + glob_activeName)
                    break
        if have_historicalData:
            stockAnalyzeDoubleVolume2DArray = []  # [stockX, [averageX], [volumeX]]
            sumAveragePrice = 0
            for avgPrice in stockAnalyzeAverageArray:
                sumAveragePrice += avgPrice
            averagePrice30days95percent = '{0:.5f}'.format(
                sumAveragePrice / len(stockAnalyzeAverageArray) * 0.95).rstrip('0')
            stockAnalyzeDoubleVolume2DArray.append(glob_activeName)
            stockAnalyzeDoubleVolume2DArray.append(
                str('{0:.5f}'.format(stockAnalyzeAverageArray[0] * 0.95)).rstrip(
                    '0'))  # Buy Price
            stockAnalyzeDoubleVolume2DArray.append(
                str('{0:.5f}'.format(stockAnalyzeAverageArray[0] * 1.05)).rstrip(
                    '0'))  # Sell Price
            stockAnalyzeDoubleVolume2DArray.append(averagePrice30days95percent)
            stockAnalyzeDoubleVolume2DArray.append(stockAnalyzeAverageArray)
            stockAnalyzeDoubleVolume2DArray.append(stockAnalyzeVolumeArray)
            glob_stockToAnalyze3DArray.append(stockAnalyzeDoubleVolume2DArray)

        self.generate_plot(algoPick3DArray=glob_stockToAnalyze3DArray, _stockName=glob_activeName)

        # new config update

    def new_config_update(self):
        """global configGUIArray
        global stock1Array
        global stock2Array
        global stock3Array
        global stock4Array
        global stock5Array
        global stock6Array"""
        try:
            """self.STOCK5_checkBox.isChecked()
            self.STOCK5_NAME_lineEdit.text()
            self.STOCK5_VOLUME_lineEdit.text()
            self.STOCK5_BUY1_PRICE_lineEdit.text()
            self.STOCK5_TotalBuy1_label.text()
            self.STOCK5_SELL1_PRICE_lineEdit.text()
            self.STOCK5_TotalSell1_label.text()
            self.STOCK5_BUY2_PRICE_lineEdit.text()
            self.STOCK5_TotalBuy2_label.text()
            self.STOCK5_SELL2_PRICE_lineEdit.text()
            self.STOCK5_TotalSell2_label.text()"""

            for i, stockArr in enumerate(self.configGUIArray):
                # ConfigFile_full_path = ConfigFile_full_path % (i + 1)
                with open(ConfigFile_full_pathArray[i], 'w') as (f):
                    f.write('%s\n' % stockArr[0].isChecked())
                    for j, item in enumerate(stockArr):
                        if j > 0:
                            f.write('%s\n' % item.text())
                    f.close()
            with open(colCredentials_full_path, 'w') as (f):
                f.write('%s\n' % self.USER1_lineEdit.text())
                f.write('%s\n' % self.USER2_lineEdit.text())
                f.close()
        except Exception:
            pass
        else:
            time.sleep(0.3)

        # new approach to check if element exist - 100% tested working and recommended

    def check_exists_by_xpath(self, xpath):
        try:
            browser.find_element(by=By.XPATH, value=xpath)
        except NoSuchElementException:
            return 0
        else:
            return 1

        # go to COL website and do log in - 100% tested working

    def colFinancialLogIn(self):
        time.sleep(1)
        try:
            browser.get(websiteCOL)  # col website
            wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathUser1)))  # user1
            browser.find_element(by=By.XPATH, value=col_xpathUser1).send_keys(self.USER1_lineEdit.text())
            wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathUser2)))  # user2
            browser.find_element(by=By.XPATH, value=col_xpathUser2).send_keys(self.USER2_lineEdit.text())
            wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathPass)))  # password
            browser.find_element(by=By.XPATH, value=col_xpathPass).send_keys(self.PASSWORD_lineEdit.text())
            wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathLogIn)))  # login button
            browser.find_element(by=By.XPATH, value=col_xpathLogIn).click()
        except:
            logging.error("Log in to COL failed")
            return 0
        else:
            return 1

        # go to iframe - 100% tested working

    def goToiFrame(self, iframe):
        try:  # try changing to headern for stock code in portfolio
            browser.switch_to.default_content()
            wait.until(EC.visibility_of_element_located((By.XPATH, iframe)))  # stock code in Trade-Portfolio headern
            iframe_headern = browser.find_element(by=By.XPATH, value=iframe)
            browser.switch_to.frame(iframe_headern)
        except:
            logging.error("goToiFrame headern failed")
            return 0
        else:
            return 1

        # go to Trader-Portfolio Tab - 100% tested working

    def goTotradePortFolioTab(self):
        time.sleep(1)
        try:
            if not self.goToiFrame(iframe=col_xpathTradeHeadern):
                return 0
            else:
                wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathTradeButton)))  # login button
                browser.find_element(by=By.XPATH, value=col_xpathTradeButton).click()
                wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathPortfolioButton)))  # login button
                browser.find_element(by=By.XPATH, value=col_xpathPortfolioButton).click()

        except:
            logging.error("Trade-Portfolio Tab failed")
            return 0
        else:
            return 1

        # get data from Trade Portfolio Tab - 100% tested working

    def getDataPortfolioTab(self):
        time.sleep(1)
        global glob_portfolioStockCodeArray
        global glob_portfolioTotalSharesArray

        global glob_counter

        if not self.goToiFrame(iframe=col_xpathStockCodeHeadern):
            return 0
        else:
            glob_counter = 0
            while True:  # count how many stock code in portfolio
                try:
                    wait.until(EC.visibility_of_element_located(
                        (By.XPATH, col_xpathBuySellTextInPortfolio_withIntVar % (glob_counter + 3))))
                    if self.check_exists_by_xpath(
                            xpath=col_xpathBuySellTextInPortfolio_withIntVar % (glob_counter + 3)):
                        buySellText = browser.find_element(by=By.XPATH,
                                                           value=col_xpathBuySellTextInPortfolio_withIntVar % (
                                                                   glob_counter + 3)).text  # stock code
                        if buySellText == "BUY | SELL":
                            glob_counter += 1
                        else:
                            break
                except:
                    logging.error("Count how many stocks in portfolio failed")
                    return 0
            try:
                glob_portfolioStockCodeArray = []
                glob_portfolioTotalSharesArray = []
                for i in range(glob_counter):  # count of stock code to look for
                    wait.until(
                        EC.visibility_of_element_located((By.XPATH, col_xpathPortfolioStockCode_withIntVar % (i + 3))))
                    if self.check_exists_by_xpath(xpath=col_xpathPortfolioStockCode_withIntVar % (i + 3)):
                        stockCode = browser.find_element(by=By.XPATH, value=col_xpathPortfolioStockCode_withIntVar % (
                                i + 3)).text  # stock code
                        glob_portfolioStockCodeArray.append(stockCode)
                    else:
                        logging.error("col_xpathPortfolioStockCode_withIntVar not found")
                        return 0
                    wait.until(EC.visibility_of_element_located(
                        (By.XPATH, col_xpathPortfolioTotalShares_withIntVar % (i + 3))))
                    if self.check_exists_by_xpath(xpath=col_xpathPortfolioTotalShares_withIntVar % (i + 3)):
                        totalShare = browser.find_element(by=By.XPATH,
                                                          value=col_xpathPortfolioTotalShares_withIntVar % (
                                                                  i + 3)).text  # total shares
                        glob_portfolioTotalSharesArray.append(int(totalShare.replace(",", "")))
                    else:
                        logging.error("col_xpathPortfolioTotalShares_withIntVar not found")
                        return 0
                if len(glob_portfolioTotalSharesArray) == glob_counter and len(
                        glob_portfolioTotalSharesArray) == glob_counter:  # check if both array has equal element
                    for i in range(glob_counter):  # check if array has empty element
                        if glob_portfolioStockCodeArray[i] == "" or glob_portfolioTotalSharesArray[i] == "":
                            glob_portfolioStockCodeArray = []
                            glob_portfolioTotalSharesArray = []
                            logging.error(
                                "glob_portfolioTotalSharesArray or glob_portfolioTotalSharesArray has empty content")
                            return 0
                else:
                    logging.error(
                        "length of glob_portfolioTotalSharesArray and glob_portfolioTotalSharesArray did not match")
                    return 0
            except:
                if i == 0:
                    logging.error("Get Data from Trade Portfolio failed")
                # elif i != (counter - 1):
                else:
                    logging.error("Get Data from Trade Portfolio incomplete..arrays cleared!!!")
                glob_portfolioStockCodeArray = []
                glob_portfolioTotalSharesArray = []
                return 0
            else:
                return 1

        # go to View/Modify Order Tab - 100% tested working

    def goToviewModifyOrderTab(self):
        time.sleep(1)
        try:
            if not self.goToiFrame(iframe=col_xpathTradeHeadern):
                return 0
            else:
                wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathTradeButton)))  # trade button
                browser.find_element(by=By.XPATH, value=col_xpathTradeButton).click()
                wait.until(
                    EC.visibility_of_element_located((By.XPATH, col_xpathViewModifyButton)))  # view/modify order button
                browser.find_element(by=By.XPATH, value=col_xpathViewModifyButton).click()
        except:
            logging.error("View/Modify Order Tab failed")
            return 0
        else:
            return 1

        # get data from View/Modify Order Tab - 100% tested working

    def getDataViewModifyOrderTab(self):
        time.sleep(1)
        global glob_viewModifyOrderStockCodeArray
        global glob_viewModifyOrderTargetPriceArray
        global glob_viewModifyOrderBuyOrSellArray

        if not self.goToiFrame(iframe=col_xpathStockCodeHeadern):
            return 0
        else:
            counter = 0
            while True:  # count how many order in view/modify order tab
                try:
                    wait.until(EC.visibility_of_element_located((By.XPATH, col_xpathViewModifyStockCodeText)))
                    if self.check_exists_by_xpath(xpath=col_xpathViewModifyStockCode_withIntVar % (counter + 2)):
                        viewModifyStockCode = browser.find_element(by=By.XPATH,
                                                                   value=col_xpathViewModifyStockCode_withIntVar % (
                                                                           counter + 2)).text  # stock code
                        if viewModifyStockCode != "":
                            counter += 1
                        else:
                            logging.error("Read data from view/modify order is empty("")!!!")
                            return 0
                    else:
                        break  # warning, no capture for fail scenario i.e. if stock code not seen but it is there
                except:
                    logging.error("Count how many stocks in view/modify order failed")
                    return 0
            try:
                glob_viewModifyOrderStockCodeArray = []
                glob_viewModifyOrderTargetPriceArray = []
                glob_viewModifyOrderBuyOrSellArray = []
                for i in range(counter):  # count of stock code to look for
                    wait.until(
                        EC.visibility_of_element_located((By.XPATH, col_xpathViewModifyStockCode_withIntVar % (i + 2))))
                    if self.check_exists_by_xpath(xpath=col_xpathViewModifyStockCode_withIntVar % (i + 2)):
                        stockCode = browser.find_element(by=By.XPATH, value=col_xpathViewModifyStockCode_withIntVar % (
                                i + 2)).text  # stock code
                        glob_viewModifyOrderStockCodeArray.append(stockCode)
                    else:
                        logging.error("get stock code in view/modify order failed")
                        return 0

                    wait.until(
                        EC.visibility_of_element_located((By.XPATH, col_xpathViewModifyPrice_withIntVar % (i + 2))))
                    if self.check_exists_by_xpath(xpath=col_xpathViewModifyPrice_withIntVar % (i + 2)):
                        targetPrice = browser.find_element(by=By.XPATH, value=col_xpathViewModifyPrice_withIntVar % (
                                i + 2)).text  # target price
                        glob_viewModifyOrderTargetPriceArray.append(float(targetPrice.replace(",", "")))
                    else:
                        logging.error("get target price in view/modify order failed")
                        return 0

                    wait.until(
                        EC.visibility_of_element_located((By.XPATH, col_xpathViewModifyBNorSN_withIntVar % (i + 2))))
                    if self.check_exists_by_xpath(xpath=col_xpathViewModifyBNorSN_withIntVar % (i + 2)):
                        checkBuyOrSell = browser.find_element(by=By.XPATH,
                                                              value=col_xpathViewModifyBNorSN_withIntVar % (
                                                                      i + 2)).text  # BN or SN
                        glob_viewModifyOrderBuyOrSellArray.append(checkBuyOrSell)
                    else:
                        logging.error("get BN or SN in view/modify order failed")
                        return 0
                    if glob_viewModifyOrderStockCodeArray[i] == "" or glob_viewModifyOrderTargetPriceArray[i] == "" or \
                            glob_viewModifyOrderBuyOrSellArray[i] == "":
                        glob_viewModifyOrderStockCodeArray = []
                        glob_viewModifyOrderTargetPriceArray = []
                        glob_viewModifyOrderBuyOrSellArray = []
                        logging.error(
                            "glob_viewModifyOrderStockCodeArray/glob_viewModifyOrderTargetPriceArray/glob_viewModifyOrderBuyOrSellArray has empty content")
                        return 0
            except:
                if i == 0:
                    logging.error("Get Data from Trade Portfolio failed")
                elif i != (counter - 1):
                    logging.error("Get Data from Trade Portfolio incomplete..arrays cleared!!!")
                glob_portfolioStockCodeArray = []
                glob_portfolioTotalSharesArray = []
                return 0
            else:
                return 1

        # array conversion to be used for mode checking

    def modeChecking(self):
        global glob_portfolioStockPresentArray
        global glob_portfolioTotalSharesGreaterVolumeArray
        global glob_viewModifyOrderStockCodeB1orS1PresentArray
        global glob_viewModifyOrderStockCodeB2orS2PresentArray
        glob_portfolioStockPresentArray = [0, 0, 0, 0, 0, 0]  # int reset to 0
        glob_portfolioTotalSharesGreaterVolumeArray = [0, 0, 0, 0, 0, 0]  # int reset to 0
        glob_viewModifyOrderStockCodeB1orS1PresentArray = [0, 0, 0, 0, 0, 0]  # int reset to 0
        glob_viewModifyOrderStockCodeB2orS2PresentArray = [0, 0, 0, 0, 0, 0]  # int reset to 0
        try:
            for i, stockArray in enumerate(self.configGUIArray):
                """glob_portfolioStockPresentArray[i] = 0  # reset
                glob_portfolioTotalSharesGreaterVolumeArray[i] = 0  # reset
                glob_viewModifyOrderStockCodeB1orS1PresentArray[i] = 0  # reset
                glob_viewModifyOrderStockCodeB2orS2PresentArray[i] = 0  # reset"""
                if stockArray[0].isChecked():
                    for j, codePortfolio in enumerate(glob_portfolioStockCodeArray):  # portfolio check
                        if stockArray[1].text() == codePortfolio:  # stock name check
                            glob_portfolioStockPresentArray[i] = 1
                            # glob_portfolioStockPresentArray.append(1)
                            if glob_portfolioTotalSharesArray[j] > int(
                                    stockArray[2].text()):  # total shares check if greater than volume
                                glob_portfolioTotalSharesGreaterVolumeArray[i] = 1
                                # glob_portfolioTotalSharesGreaterVolumeArray.append(1)
                            else:
                                glob_portfolioTotalSharesGreaterVolumeArray[i] = 0
                                # glob_portfolioTotalSharesGreaterVolumeArray.append(0)
                        elif stockArray[1].text() not in glob_portfolioStockCodeArray:
                            break
                    for k, codeViewModify in enumerate(glob_viewModifyOrderStockCodeArray):  # for view modify order
                        if stockArray[1].text() == codeViewModify:  # stock name check
                            if glob_viewModifyOrderTargetPriceArray[k] == float(stockArray[3].text().replace(",",
                                                                                                             "")):  # target buy1 price check with gui buy1 price
                                if glob_viewModifyOrderBuyOrSellArray[k] == "BN":
                                    glob_viewModifyOrderStockCodeB1orS1PresentArray[i] = 1
                                    # glob_viewModifyOrderStockCodeB1orS1PresentArray.append(1)
                                else:
                                    return 0
                            if glob_viewModifyOrderTargetPriceArray[k] == float(stockArray[5].text().replace(",",
                                                                                                             "")):  # target sell1 price check with gui sell1 price
                                if glob_viewModifyOrderBuyOrSellArray[k] == "SN":
                                    glob_viewModifyOrderStockCodeB1orS1PresentArray[i] = 1
                                    # glob_viewModifyOrderStockCodeB1orS1PresentArray.append(1)
                                else:
                                    return 0
                            if glob_viewModifyOrderTargetPriceArray[k] == float(stockArray[7].text().replace(",",
                                                                                                             "")):  # target buy2 price check with gui buy2 price
                                if glob_viewModifyOrderBuyOrSellArray[k] == "BN":
                                    glob_viewModifyOrderStockCodeB2orS2PresentArray[i] = 1
                                    # glob_viewModifyOrderStockCodeB2orS2PresentArray.append(1)
                                else:
                                    return 0
                            if glob_viewModifyOrderTargetPriceArray[k] == float(stockArray[9].text().replace(",",
                                                                                                             "")):  # target sell2 price check with gui sell2 price
                                if glob_viewModifyOrderBuyOrSellArray[k] == "SN":
                                    glob_viewModifyOrderStockCodeB2orS2PresentArray[i] = 1
                                    # glob_viewModifyOrderStockCodeB2orS2PresentArray.append(1)
                                else:
                                    return 0
                        elif stockArray[1].text() not in glob_viewModifyOrderStockCodeArray:
                            break
        except:
            return 0
        else:
            return 1

        # calculate to decimal value the output of modeChecking

    def calcToDecVal(self):
        global glob_calcToDeclVal
        glob_calcToDeclVal = [0, 0, 0, 0, 0, 0]
        try:
            for i, stockArray in enumerate(self.configGUIArray):
                if stockArray[0].isChecked():
                    firstCalc = glob_viewModifyOrderStockCodeB2orS2PresentArray[i]
                    secondCalc = glob_viewModifyOrderStockCodeB1orS1PresentArray[i]
                    thirdCalc = glob_portfolioTotalSharesGreaterVolumeArray[i]
                    fourthCalc = glob_portfolioStockPresentArray[i]
                    calcVal = (1 * firstCalc) + (2 * secondCalc) + (4 * thirdCalc) + (8 * fourthCalc)
                    glob_calcToDeclVal[i] = calcVal
        except:
            logging.error("calcToDecVal function failed")
            return 0
        else:
            return 1

        # buy1 or buy2 or buy both stock

    def buy_setup(self):
        global stock
        global stock_volume
        global buy_price
        global password
        buy1Array = [0, 1]
        buy2Array = [0, 2, 8, 10]
        try:
            for i, stockArray in enumerate(self.configGUIArray):
                if stockArray[0].isChecked():
                    stock = stockArray[1].text()
                    stock_volume = stockArray[2].text().replace(",", "")
                    password = self.PASSWORD_lineEdit.text()
                    if glob_calcToDeclVal[i] in buy1Array:  # buy1
                        buy_price = stockArray[3].text().replace(",", "")
                        self.buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
                    if glob_calcToDeclVal[i] in buy2Array:  # buy2
                        buy_price = stockArray[7].text().replace(",", "")
                        self.buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
        except:
            logging.error("buy_setup function failed")
            return 0
        else:
            return 1

        # sell1 or sell2 or sell both stock

    def sell_setup(self):
        global stock
        global stock_volume
        global sell_price
        global password
        sell1Array = [8, 9, 12, 13]
        # 8 - sell1: total shares left
        # 9 - sell1: total shares left
        # 12 - sell1:vol
        # 13 - sell1:vol
        sell2Array = [12, 14]

        # 12 - sell2:total shares - volume
        # 14 - sell2:total shares - volume

        # partial is to deduct volume to total shares
        try:
            for i, stockArray in enumerate(self.configGUIArray):
                if stockArray[0].isChecked():
                    stock = stockArray[1].text()
                    stock_volume = stockArray[2].text().replace(",", "")
                    password = self.PASSWORD_lineEdit.text()
                    totalSharesInPort = 0
                    for j in range(glob_counter):  # get counter j and get totalshares of index j
                        if stockArray[1].text() == glob_portfolioStockCodeArray[j]:
                            totalSharesInPort = glob_portfolioTotalSharesArray[j]
                    if glob_calcToDeclVal[i] in sell1Array:  # sell1
                        sell_price = stockArray[5].text().replace(",", "")
                        if glob_calcToDeclVal[i] == 12 or glob_calcToDeclVal[i] == 9:  # sell1 whole vol
                            self.sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
                        else:  # 8(1000) or 9(1001) --> StockInPort, totalShares>Vol, B1orS1viewModPresent, B2orS2viewModPresent
                            self.sell(stock_code=stock, volume=totalSharesInPort, target_sell_price=sell_price)
                    if glob_calcToDeclVal[i] in sell2Array:  # sell2
                        sell_price = stockArray[9].text().replace(",", "")
                        self.sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
        except:
            logging.error("sell_setup function failed")
            return 0
        else:
            return 1

        # 100% working from old version - to enhanced in future

    def buy(self, stock_code, volume, target_buy_price):
        iframe_headern, iframe_main, iframe_body = refresh_page(stock_code_refresh_page=stock_code)
        browser.switch_to.default_content()
        browser.switch_to.frame(iframe_main)
        browser.switch_to.frame(iframe_body)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH,
                '//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[1]/font')))  # board lot text
            wait.until(EC.visibility_of_element_located((
                By.XPATH,
                '//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[2]/font')))  # board lot val
            boardLotText = browser.find_element(by=By.XPATH,
                                                value='//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[1]/font').text  # board lot text
            boardLotVal = int(browser.find_element(by=By.XPATH,
                                                   value='//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[2]/font').text.replace(
                ",", ""))  # board lot val
            # if boardLotText != "BoardLot":
            #     logging.error('board lot text find failed')
            #     browser.refresh()
            #     print('Page Refresh!!!')
            #     buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
            # else:
            #     boardLotFactor = int(volume) // boardLotVal
            if boardLotText != "BoardLot":
                logging.error('board lot text find failed')
                browser.refresh()
                print('Page Refresh!!!')
                buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
            elif int(volume) != boardLotVal:
                while True:
                    logging.error('volume not divisble of board lot')
                    time.sleep(5)
        except:
            logging.error('board lot text/value find failed')
            browser.refresh()
            print('Page Refresh!!!')
            buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
        # else:
        #     volume = str(boardLotFactor * boardLotVal)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH,
                '/html/body/div[2]/center/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td[3]/font/a[1]')))
        except:
            logging.error('wait failed')
            browser.refresh()
            print('Page Refresh!!!')
            buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
        else:
            browser.find_element(by=By.XPATH,
                                 value='/html/body/div[2]/center/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td[3]/font/a[1]').click()
            time.sleep(2)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            try:
                wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="OrderForm"]')))
            except:
                logging.error('wait failed')
                browser.refresh()
                print('Page Refresh!!!')
                buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
            else:
                iframe_orderform = browser.find_element(by=By.XPATH, value='//*[@id="OrderForm"]')
                browser.switch_to.frame(iframe_orderform)
        try:
            wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="txtNumNoShare"]')))
        except:
            logging.error('wait failed')
            browser.refresh()
            print('Page Refresh!!!')
            buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
        else:
            browser.find_element(by=By.XPATH, value='//*[@id="txtNumNoShare"]').send_keys(volume)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            browser.switch_to.frame(iframe_orderform)
            try:
                wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="txtFloatPrice"]')))
            except:
                logging.error('wait failed')
                browser.refresh()
                print('Page Refresh!!!')
                buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
            else:
                browser.find_element(by=By.XPATH, value='//*[@id="txtFloatPrice"]').send_keys(str(target_buy_price))
                browser.switch_to.default_content()
                browser.switch_to.frame(iframe_main)
                browser.switch_to.frame(iframe_orderform)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH, '/html/body/div[2]/table/tbody/tr/td/form/div/table[2]/tbody/tr/td[1]/input')))
        except:
            logging.error('wait failed')
            browser.refresh()
            print('Page Refresh!!!')
            buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
        else:
            browser.find_element(by=By.XPATH,
                                 value='/html/body/div[2]/table/tbody/tr/td/form/div/table[2]/tbody/tr/td[1]/input').click()
            time.sleep(2)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            try:
                wait.until(EC.visibility_of_element_located((
                    By.XPATH, 'html/body/div/center/table/tbody/tr[5]/td/form/p/input[1]')))
                browser.find_element(by=By.XPATH,
                                     value='/html/body/div/center/table/tbody/tr[5]/td/form/p/input[1]').click()
            except:
                logging.error('No pop-up reminder')
            else:
                time.sleep(2)
                browser.switch_to.default_content()
                browser.switch_to.frame(iframe_main)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH, '//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[2]/input')))
        except:
            logging.error('wait failed')
            browser.refresh()
            print('Page Refresh!!!')
            buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
        else:
            browser.find_element(by=By.XPATH,
                                 value='//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[2]/input').send_keys(
                password)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            try:
                wait.until(EC.visibility_of_element_located((
                    By.XPATH, '//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[3]/input[1]')))
            except:
                logging.error('wait failed')
                browser.refresh()
                print('Page Refresh!!!')
                buy(stock_code=stock, volume=stock_volume, target_buy_price=buy_price)
            else:
                browser.find_element(by=By.XPATH,
                                     value='//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[3]/input[1]').click()

        # 100% working from old version - to enhanced in future

    def sell(self, stock_code, volume, target_sell_price):
        iframe_headern, iframe_main, iframe_body = refresh_page(stock_code_refresh_page=stock_code)
        browser.switch_to.default_content()
        browser.switch_to.frame(iframe_main)
        browser.switch_to.frame(iframe_body)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH,
                '//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[1]/font')))  # board lot text
            wait.until(EC.visibility_of_element_located((
                By.XPATH,
                '//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[2]/font')))  # board lot val
            boardLotText = browser.find_element(by=By.XPATH,
                                                value='//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[1]/font').text  # board lot text
            boardLotVal = int(browser.find_element(by=By.XPATH,
                                                   value='//*[@id="txtHint1"]/div/table/tbody/tr/td[2]/table/tbody/tr/td[2]/table/tbody/tr[15]/td[2]/font').text.replace(
                ",", ""))  # board lot val
            # if boardLotText != "BoardLot":
            #     logging.error('board lot text find failed')
            #     browser.refresh()
            #     print('Page Refresh!!!')
            #     sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
            # else:
            #     boardLotFactor = int(volume) // boardLotVal
            if boardLotText != "BoardLot":
                logging.error('board lot text find failed')
                browser.refresh()
                print('Page Refresh!!!')
                sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
            elif int(volume) != boardLotVal:
                while True:
                    logging.error('volume not divisble of board lot')
                    time.sleep(5)
        except:
            logging.error('board lot text/value find failed')
            browser.refresh()
            print('Page Refresh!!!')
            sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH,
                '/html/body/div[2]/center/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td[3]/font/a[2]')))
        except:
            logging.error('wait failed1')
            browser.refresh()
            print('Page Refresh!!!')
            sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
        else:
            browser.find_element(by=By.XPATH,
                                 value='/html/body/div[2]/center/table/tbody/tr/td/table/tbody/tr/td/table/tbody/tr/td[3]/font/a[2]').click()
            time.sleep(2)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
        try:
            wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="OrderForm"]')))
        except:
            logging.error('wait failed2')
            browser.refresh()
            print('Page Refresh!!!')
            sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
        else:
            iframe_orderform = browser.find_element(by=By.XPATH, value='//*[@id="OrderForm"]')
            browser.switch_to.frame(iframe_orderform)
            try:
                wait.until(EC.visibility_of_element_located((
                    By.XPATH,
                    '/html/body/div[2]/table/tbody/tr/td/form/div/table[1]/tbody/tr[4]/td[2]/b/font[2]/input[1]')))
            except:
                logging.error('wait failed3')
                browser.refresh()
                print('Page Refresh!!!')
                sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
            else:
                browser.find_element(by=By.XPATH,
                                     value='/html/body/div[2]/table/tbody/tr/td/form/div/table[1]/tbody/tr[4]/td[2]/b/font[2]/input[1]').click()
        try:
            wait.until(EC.alert_is_present(), 'GTC Orders are valid for 60 days.').accept()
            logging.info('alert accepted')
        except:
            logging.error('no alert')
        else:
            time.sleep(3)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            try:
                wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="OrderForm"]')))
            except:
                logging.error('wait failed4')
                browser.refresh()
                print('Page Refresh!!!')
                sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
            else:
                iframe_orderform = browser.find_element(by=By.XPATH, value='//*[@id="OrderForm"]')
                browser.switch_to.frame(iframe_orderform)
        try:
            wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="txtNumNoShare"]')))
        except:
            logging.error('wait failed5')
            browser.refresh()
            print('Page Refresh!!!')
            sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
        else:
            browser.find_element(by=By.XPATH, value='//*[@id="txtNumNoShare"]').send_keys(volume)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            browser.switch_to.frame(iframe_orderform)
            try:
                wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="txtFloatPrice"]')))
            except:
                logging.error('wait failed6')
                browser.refresh()
                print('Page Refresh!!!')
                sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
            else:
                browser.find_element(by=By.XPATH, value='//*[@id="txtFloatPrice"]').send_keys(str(target_sell_price))
                browser.switch_to.default_content()
                browser.switch_to.frame(iframe_main)
                browser.switch_to.frame(iframe_orderform)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH, '/html/body/div[2]/table/tbody/tr/td/form/div/table[2]/tbody/tr/td[1]/input')))
        except:
            logging.error('wait failed7')
            browser.refresh()
            print('Page Refresh!!!')
            sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
        else:
            browser.find_element(by=By.XPATH,
                                 value='/html/body/div[2]/table/tbody/tr/td/form/div/table[2]/tbody/tr/td[1]/input').click()
            time.sleep(2)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            try:
                wait.until(EC.visibility_of_element_located((
                    By.XPATH, 'html/body/div/center/table/tbody/tr[5]/td/form/p/input[1]')))
                browser.find_element(by=By.XPATH,
                                     value='/html/body/div/center/table/tbody/tr[5]/td/form/p/input[1]').click()
            except Exception:
                logging.error('No pop-up reminder')
            else:
                time.sleep(2)
                browser.switch_to.default_content()
                browser.switch_to.frame(iframe_main)
        try:
            wait.until(EC.visibility_of_element_located((
                By.XPATH, '//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[2]/input')))
        except:
            logging.error('wait failed8')
            browser.refresh()
            print('Page Refresh!!!')
            sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
        else:
            browser.find_element(by=By.XPATH,
                                 value='//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[2]/input').send_keys(
                password)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            try:
                wait.until(EC.visibility_of_element_located((
                    By.XPATH, '//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[3]/input[1]')))
            except:
                logging.error('wait failed9')
                browser.refresh()
                print('Page Refresh!!!')
                sell(stock_code=stock, volume=stock_volume, target_sell_price=sell_price)
            else:
                browser.find_element(by=By.XPATH,
                                     value='//*[@id="DIV2"]/div[2]/center/table/tbody/tr/td/form/table/tbody/tr/td[3]/input[1]').click()

    def checkTime(self):  # loop if not yet trading hours
        while True:  # loop if not trading hours
            now = datetime.datetime.now()
            today930am = now.replace(hour=9, minute=31, second=0, microsecond=0)
            today12nn = now.replace(hour=11, minute=59, second=0, microsecond=0)
            today1pm = now.replace(hour=13, minute=1, second=0, microsecond=0)
            today245pm = now.replace(hour=14, minute=44, second=0, microsecond=0)
            if today930am < now < today12nn:  # trading time
                break
            elif today1pm < now < today245pm:
                break
            else:
                time.sleep(1)
                logging.error("Not Trading Time!")

    def START_Button(self):
        # loop until log-in, trade-portfolio data, view modify order data success
        self.new_config_update()
        while True:
            self.checkTime()
            if self.colFinancialLogIn():  # log in
                time_elapse = 31
                while True:
                    self.checkTime()
                    if time_elapse > 30:
                        time_start = time.time()
                        time_elapse = 0
                        if self.goTotradePortFolioTab():  # go to Trade-Porfolio tab
                            if self.getDataPortfolioTab():  # do get the data inside portfolio for mode checking
                                if self.goToviewModifyOrderTab():  # go to View/Modify Order tab
                                    if self.getDataViewModifyOrderTab():  # do get the data inside viewModify for mode checking
                                        if self.modeChecking():  # do mode checking before executing mode
                                            if self.calcToDecVal():  # calculate to decimal value the output of modeChecking
                                                if self.buy_setup():  # buy if there is a need to buy
                                                    if self.sell_setup():  # sell if there is a need to sell
                                                        pass
                                                    else:
                                                        # browser.close()
                                                        break
                                                else:
                                                    # browser.close()
                                                    break
                                            else:
                                                # browser.close()
                                                break
                                        else:
                                            # browser.close()
                                            break
                                    else:
                                        # browser.close()
                                        break
                                else:
                                    # browser.close()
                                    break
                            else:
                                # browser.close()
                                break
                        else:
                            # browser.close()
                            break
                    time.sleep(1)
                    time_elapse = time.time() - time_start

            else:
                # browser.close()
                continue
            time.sleep(1)

    # ***** John End Copy *****

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "USER1:"))
        self.label_2.setText(_translate("MainWindow", "USER2:"))
        self.label_3.setText(_translate("MainWindow", "PASSWORD:"))
        self.START_pushButton.setText(_translate("MainWindow", "START"))
        self.label_16.setText(_translate("MainWindow", "STOCK 1"))
        self.label_6.setText(_translate("MainWindow", "STOCK NAME:"))
        self.label_5.setToolTip(_translate("MainWindow", "123"))
        self.label_5.setText(_translate("MainWindow", "VOLUME:"))
        self.label_4.setText(_translate("MainWindow", "BUY PRICE1:"))
        self.label_8.setText(_translate("MainWindow", "TOTAL BUY1="))
        self.label_7.setText(_translate("MainWindow", "SELL PRICE1:"))
        self.label_9.setText(_translate("MainWindow", "TOTAL SELL1="))
        self.label_13.setText(_translate("MainWindow", "BUY PRICE2:"))
        self.label_15.setText(_translate("MainWindow", "TOTAL BUY2="))
        self.label_12.setText(_translate("MainWindow", "SELL PRICE2:"))
        self.label_14.setText(_translate("MainWindow", "TOTAL SELL2="))
        self.label_18.setText(_translate("MainWindow", "STOCK 2"))
        self.label_17.setText(_translate("MainWindow", "STOCK NAME:"))
        self.label_24.setText(_translate("MainWindow", "VOLUME:"))
        self.label_26.setText(_translate("MainWindow", "BUY PRICE1:"))
        self.label_27.setText(_translate("MainWindow", "TOTAL BUY1="))
        self.label_22.setText(_translate("MainWindow", "SELL PRICE1:"))
        self.label_23.setText(_translate("MainWindow", "TOTAL SELL1="))
        self.label_21.setText(_translate("MainWindow", "BUY PRICE2:"))
        self.label_20.setText(_translate("MainWindow", "TOTAL BUY2="))
        self.label_19.setText(_translate("MainWindow", "SELL PRICE2:"))
        self.label_25.setText(_translate("MainWindow", "TOTAL SELL2="))
        self.label_29.setText(_translate("MainWindow", "STOCK 3"))
        self.label_28.setText(_translate("MainWindow", "STOCK NAME:"))
        self.label_35.setText(_translate("MainWindow", "VOLUME:"))
        self.label_37.setText(_translate("MainWindow", "BUY PRICE1:"))
        self.label_38.setText(_translate("MainWindow", "TOTAL BUY1="))
        self.label_33.setText(_translate("MainWindow", "SELL PRICE1:"))
        self.label_34.setText(_translate("MainWindow", "TOTAL SELL1="))
        self.label_32.setText(_translate("MainWindow", "BUY PRICE2:"))
        self.label_31.setText(_translate("MainWindow", "TOTAL BUY2="))
        self.label_30.setText(_translate("MainWindow", "SELL PRICE2:"))
        self.label_36.setText(_translate("MainWindow", "TOTAL SELL2="))
        self.label_40.setText(_translate("MainWindow", "STOCK 4"))
        self.label_39.setText(_translate("MainWindow", "STOCK NAME:"))
        self.label_47.setText(_translate("MainWindow", "VOLUME:"))
        self.label_48.setText(_translate("MainWindow", "BUY PRICE1:"))
        self.label_49.setText(_translate("MainWindow", "TOTAL BUY1="))
        self.label_44.setText(_translate("MainWindow", "SELL PRICE1:"))
        self.label_45.setText(_translate("MainWindow", "TOTAL SELL1="))
        self.label_43.setText(_translate("MainWindow", "BUY PRICE2:"))
        self.label_42.setText(_translate("MainWindow", "TOTAL BUY2="))
        self.label_41.setText(_translate("MainWindow", "SELL PRICE2:"))
        self.label_46.setText(_translate("MainWindow", "TOTAL SELL2="))
        self.label_51.setText(_translate("MainWindow", "STOCK 5"))
        self.label_50.setText(_translate("MainWindow", "STOCK NAME:"))
        self.label_58.setText(_translate("MainWindow", "VOLUME:"))
        self.label_59.setText(_translate("MainWindow", "BUY PRICE1:"))
        self.label_60.setText(_translate("MainWindow", "TOTAL BUY1="))
        self.label_55.setText(_translate("MainWindow", "SELL PRICE1:"))
        self.label_56.setText(_translate("MainWindow", "TOTAL SELL1="))
        self.label_54.setText(_translate("MainWindow", "BUY PRICE2:"))
        self.label_53.setText(_translate("MainWindow", "TOTAL BUY2="))
        self.label_52.setText(_translate("MainWindow", "SELL PRICE2:"))
        self.label_57.setText(_translate("MainWindow", "TOTAL SELL2="))
        self.label_62.setText(_translate("MainWindow", "STOCK 6"))
        self.label_61.setText(_translate("MainWindow", "STOCK NAME:"))
        self.label_69.setText(_translate("MainWindow", "VOLUME:"))
        self.label_70.setText(_translate("MainWindow", "BUY PRICE1:"))
        self.label_71.setText(_translate("MainWindow", "TOTAL BUY1="))
        self.label_66.setText(_translate("MainWindow", "SELL PRICE1:"))
        self.label_67.setText(_translate("MainWindow", "TOTAL SELL1="))
        self.label_65.setText(_translate("MainWindow", "BUY PRICE2:"))
        self.label_64.setText(_translate("MainWindow", "TOTAL BUY2="))
        self.label_63.setText(_translate("MainWindow", "SELL PRICE2:"))
        self.label_68.setText(_translate("MainWindow", "TOTAL SELL2="))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "COL"))
        self.comboBox.setItemText(0, _translate("MainWindow", "BUY"))
        self.comboBox.setItemText(1, _translate("MainWindow", "CHECK_BUY"))
        self.comboBox.setItemText(2, _translate("MainWindow", "SELL"))
        self.comboBox.setItemText(3, _translate("MainWindow", "CHECK_SELL"))
        self.RunAlgo_pushButton.setText(_translate("MainWindow", "Run ALGO"))
        self.label_11.setText(_translate("MainWindow", "ALGO Suggestion\n"
                                                       "Show Graph"))
        self.label_10.setText(_translate("MainWindow", "Most Active\n"
                                                       "Stocks"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Choose Source"))
        self.pesobility_radioButton.setText(_translate("MainWindow", "Pesobility"))
        self.pse_radioButton.setText(_translate("MainWindow", "PSE"))
        self.notepad_radioButton.setText(_translate("MainWindow", "Notepad"))
        self.ShowGraph_pushButton.setText(_translate("MainWindow", "Show Graph"))
        self.ShowGraphStockToAnalyze_pushButton.setText(_translate("MainWindow", "Analyze Stock\n"
                                                                                 "Graph"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_2), _translate("MainWindow", "ALGO and Graph"))

        # john start copy
        """global configGUIArray
        global stock1Array
        global stock2Array
        global stock3Array
        global stock4Array
        global stock5Array
        global stock6Array"""

        self.stock1Array = [self.STOCK1_checkBox, self.STOCK1_NAME_lineEdit, self.STOCK1_VOLUME_lineEdit,
                            self.STOCK1_BUY1_PRICE_lineEdit,
                            self.STOCK1_TotalBuy1_label, self.STOCK1_SELL1_PRICE_lineEdit, self.STOCK1_TotalSell1_label,
                            self.STOCK1_BUY2_PRICE_lineEdit,
                            self.STOCK1_TotalBuy2_label, self.STOCK1_SELL2_PRICE_lineEdit, self.STOCK1_TotalSell2_label]
        self.stock2Array = [self.STOCK2_checkBox, self.STOCK2_NAME_lineEdit, self.STOCK2_VOLUME_lineEdit,
                            self.STOCK2_BUY1_PRICE_lineEdit,
                            self.STOCK2_TotalBuy1_label, self.STOCK2_SELL1_PRICE_lineEdit, self.STOCK2_TotalSell1_label,
                            self.STOCK2_BUY2_PRICE_lineEdit,
                            self.STOCK2_TotalBuy2_label, self.STOCK2_SELL2_PRICE_lineEdit, self.STOCK2_TotalSell2_label]
        self.stock3Array = [self.STOCK3_checkBox, self.STOCK3_NAME_lineEdit, self.STOCK3_VOLUME_lineEdit,
                            self.STOCK3_BUY1_PRICE_lineEdit,
                            self.STOCK3_TotalBuy1_label, self.STOCK3_SELL1_PRICE_lineEdit, self.STOCK3_TotalSell1_label,
                            self.STOCK3_BUY2_PRICE_lineEdit,
                            self.STOCK3_TotalBuy2_label, self.STOCK3_SELL2_PRICE_lineEdit, self.STOCK3_TotalSell2_label]
        self.stock4Array = [self.STOCK4_checkBox, self.STOCK4_NAME_lineEdit, self.STOCK4_VOLUME_lineEdit,
                            self.STOCK4_BUY1_PRICE_lineEdit,
                            self.STOCK4_TotalBuy1_label, self.STOCK4_SELL1_PRICE_lineEdit, self.STOCK4_TotalSell1_label,
                            self.STOCK4_BUY2_PRICE_lineEdit,
                            self.STOCK4_TotalBuy2_label, self.STOCK4_SELL2_PRICE_lineEdit, self.STOCK4_TotalSell2_label]
        self.stock5Array = [self.STOCK5_checkBox, self.STOCK5_NAME_lineEdit, self.STOCK5_VOLUME_lineEdit,
                            self.STOCK5_BUY1_PRICE_lineEdit,
                            self.STOCK5_TotalBuy1_label, self.STOCK5_SELL1_PRICE_lineEdit, self.STOCK5_TotalSell1_label,
                            self.STOCK5_BUY2_PRICE_lineEdit,
                            self.STOCK5_TotalBuy2_label, self.STOCK5_SELL2_PRICE_lineEdit, self.STOCK5_TotalSell2_label]
        self.stock6Array = [self.STOCK6_checkBox, self.STOCK6_NAME_lineEdit, self.STOCK6_VOLUME_lineEdit,
                            self.STOCK6_BUY1_PRICE_lineEdit,
                            self.STOCK6_TotalBuy1_label, self.STOCK6_SELL1_PRICE_lineEdit, self.STOCK6_TotalSell1_label,
                            self.STOCK6_BUY2_PRICE_lineEdit,
                            self.STOCK6_TotalBuy2_label, self.STOCK6_SELL2_PRICE_lineEdit, self.STOCK6_TotalSell2_label]
        self.configGUIArray = [self.stock1Array, self.stock2Array, self.stock3Array, self.stock4Array, self.stock5Array,
                               self.stock6Array]

        try:
            colCredentialArray = []
            if os.path.isfile(colCredentials_full_path):
                with open(colCredentials_full_path, 'r') as (f):
                    for item in f.readlines():
                        colCredentialArray.append(item.rstrip('\n'))
            else:
                colCredentialArray.append('')
                colCredentialArray.append('')
            self.USER1_lineEdit.setText(colCredentialArray[0])
            self.USER2_lineEdit.setText(colCredentialArray[1])

            for i, stockArr in enumerate(self.configGUIArray):
                config_list = []
                # ConfigFile_full_path = ConfigFile_full_path % (i + 1)
                if os.path.isfile(ConfigFile_full_pathArray[i]):
                    with open(ConfigFile_full_pathArray[i], 'r') as (f):
                        for item in f.readlines():
                            config_list.append(item.rstrip('\n'))
                else:
                    for j in range(11):
                        config_list.append("")
                stockArr[0].setChecked(
                    True if config_list[0] == "True" else False)  # self.STOCK5_checkBox.setChecked(True)
                for k, item in enumerate(stockArr):
                    if k > 0:
                        item.setText(config_list[k])
        except Exception:
            pass

        # john end copy


def refresh_page(stock_code_refresh_page):
    browser.switch_to.default_content()
    try:
        wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="headern"]')))
    except:
        logging.error('wait failed')
        browser.refresh()
        print('Page Refresh!!!')
        refresh_page(stock_code_refresh_page=stock)
    else:
        iframe_headern = browser.find_element(by=By.XPATH, value='//*[@id="headern"]')
        browser.switch_to.frame(iframe_headern)
    try:
        wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="CQ"]/a')))
    except:
        logging.error('wait failed')
        browser.refresh()
        print('Page Refresh!!!')
        refresh_page(stock_code_refresh_page=stock)
    else:
        browser.find_element(by=By.XPATH, value='//*[@id="CQ"]/a').click()
        time.sleep(3)
        browser.find_element(by=By.XPATH, value='//*[@id="CQ"]/a').click()
        time.sleep(3)
        browser.switch_to.default_content()
        try:
            wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="main"]')))
        except:
            logging.error('wait failed')
            browser.refresh()
            print('Page Refresh!!!')
            refresh_page(stock_code_refresh_page=stock)
        else:
            iframe_main = browser.find_element(by=By.XPATH, value='//*[@id="main"]')
            browser.switch_to.frame(iframe_main)
    try:
        wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="body"]')))
    except:
        logging.error('wait failed')
        browser.refresh()
        print('Page Refresh!!!')
        refresh_page(stock_code_refresh_page=stock)
    else:
        iframe_body = browser.find_element(by=By.XPATH, value='//*[@id="body"]')
        browser.switch_to.frame(iframe_body)
        try:
            wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="T1"]')))
        except:
            logging.error('wait failed')
            browser.refresh()
            print('Page Refresh!!!')
            refresh_page(stock_code_refresh_page=stock)
        else:
            browser.find_element(by=By.XPATH, value='//*[@id="T1"]').send_keys(stock_code_refresh_page)
            time.sleep(1)
            browser.switch_to.default_content()
            browser.switch_to.frame(iframe_main)
            browser.switch_to.frame(iframe_body)
    try:
        wait.until(EC.visibility_of_element_located((By.XPATH, '//*[@id="B1"]')))
    except:
        logging.error('wait failed')
        browser.refresh()
        print('Page Refresh!!!')
        refresh_page(stock_code_refresh_page=stock)
    else:
        try:
            browser.find_element(by=By.XPATH, value='//*[@id="B1"]').click()
            time.sleep(5)
        except:
            logging.error('click failed')
            browser.refresh()
            print('Page Refresh!!!')
            refresh_page(stock_code_refresh_page=stock)
        else:
            while True:
                try:
                    wait.until(EC.visibility_of_element_located((
                        By.XPATH, xpath_price)))
                    break
                except:
                    logging.error('wait failed')
                    browser.refresh()
                    print('Page Refresh!!!')
                    refresh_page(stock_code_refresh_page=stock)

            return (
                iframe_headern, iframe_main, iframe_body)


# add function to check only on valid time
def checkValidTime():
    # to add body of function
    pass


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
